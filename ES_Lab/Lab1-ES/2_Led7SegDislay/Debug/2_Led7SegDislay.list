
2_Led7SegDislay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080026b0  080026b0  000036b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026c0  080026c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c8  080026c8  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080026d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004018  2**0
                  CONTENTS
 10 .bss          00000074  20000018  20000018  00004018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009710  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e9  00000000  00000000  0000d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0000f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ae  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b87  00000000  00000000  000101f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4f5  00000000  00000000  00032d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ec4  00000000  00000000  0003e272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113136  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000290c  00000000  00000000  0011317c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00115a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002698 	.word	0x08002698

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08002698 	.word	0x08002698

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Set7SegDisplayValue>:
						0b01111101, //6
						0b00000111, //7
						0b01111111, //8
						0b01101111};//9                                                       0
void Set7SegDisplayValue(int val)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	DisplayValue = val;
 8000520:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <Set7SegDisplayValue+0x20>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6013      	str	r3, [r2, #0]
	pos = 0;
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <Set7SegDisplayValue+0x24>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000034 	.word	0x20000034
 800053c:	20000038 	.word	0x20000038

08000540 <Run7SegDisplay>:
//uint16_t pin[] = {PIN_7SEG_A, PIN_7SEG_B, PIN_7SEG_C, PIN_7SEG_D,
//                  PIN_7SEG_E, PIN_7SEG_F, PIN_7SEG_G, PIN_7SEG_P};

void Run7SegDisplay()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	unsigned char val;
	pos++;
 8000546:	4b70      	ldr	r3, [pc, #448]	@ (8000708 <Run7SegDisplay+0x1c8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	4a6e      	ldr	r2, [pc, #440]	@ (8000708 <Run7SegDisplay+0x1c8>)
 800054e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2104      	movs	r1, #4
 8000554:	486d      	ldr	r0, [pc, #436]	@ (800070c <Run7SegDisplay+0x1cc>)
 8000556:	f001 f863 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	486b      	ldr	r0, [pc, #428]	@ (800070c <Run7SegDisplay+0x1cc>)
 8000560:	f001 f85e 	bl	8001620 <HAL_GPIO_WritePin>

	if (pos & 0x1)
 8000564:	4b68      	ldr	r3, [pc, #416]	@ (8000708 <Run7SegDisplay+0x1c8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d010      	beq.n	8000592 <Run7SegDisplay+0x52>
		val = Mask[DisplayValue % 10];
 8000570:	4b67      	ldr	r3, [pc, #412]	@ (8000710 <Run7SegDisplay+0x1d0>)
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <Run7SegDisplay+0x1d4>)
 8000576:	fb83 2301 	smull	r2, r3, r3, r1
 800057a:	109a      	asrs	r2, r3, #2
 800057c:	17cb      	asrs	r3, r1, #31
 800057e:	1ad2      	subs	r2, r2, r3
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1aca      	subs	r2, r1, r3
 800058a:	4b63      	ldr	r3, [pc, #396]	@ (8000718 <Run7SegDisplay+0x1d8>)
 800058c:	5c9b      	ldrb	r3, [r3, r2]
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e015      	b.n	80005be <Run7SegDisplay+0x7e>
	else
		val = Mask[(DisplayValue / 10) % 10];
 8000592:	4b5f      	ldr	r3, [pc, #380]	@ (8000710 <Run7SegDisplay+0x1d0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a5f      	ldr	r2, [pc, #380]	@ (8000714 <Run7SegDisplay+0x1d4>)
 8000598:	fb82 1203 	smull	r1, r2, r2, r3
 800059c:	1092      	asrs	r2, r2, #2
 800059e:	17db      	asrs	r3, r3, #31
 80005a0:	1ad1      	subs	r1, r2, r3
 80005a2:	4b5c      	ldr	r3, [pc, #368]	@ (8000714 <Run7SegDisplay+0x1d4>)
 80005a4:	fb83 2301 	smull	r2, r3, r3, r1
 80005a8:	109a      	asrs	r2, r3, #2
 80005aa:	17cb      	asrs	r3, r1, #31
 80005ac:	1ad2      	subs	r2, r2, r3
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	1aca      	subs	r2, r1, r3
 80005b8:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <Run7SegDisplay+0x1d8>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	71fb      	strb	r3, [r7, #7]

	if (val & 0x80)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	da06      	bge.n	80005d4 <Run7SegDisplay+0x94>
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005cc:	4853      	ldr	r0, [pc, #332]	@ (800071c <Run7SegDisplay+0x1dc>)
 80005ce:	f001 f827 	bl	8001620 <HAL_GPIO_WritePin>
 80005d2:	e005      	b.n	80005e0 <Run7SegDisplay+0xa0>
	else
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005da:	4850      	ldr	r0, [pc, #320]	@ (800071c <Run7SegDisplay+0x1dc>)
 80005dc:	f001 f820 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x40)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <Run7SegDisplay+0xb8>
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f0:	484a      	ldr	r0, [pc, #296]	@ (800071c <Run7SegDisplay+0x1dc>)
 80005f2:	f001 f815 	bl	8001620 <HAL_GPIO_WritePin>
 80005f6:	e005      	b.n	8000604 <Run7SegDisplay+0xc4>
	else
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4847      	ldr	r0, [pc, #284]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000600:	f001 f80e 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x20)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <Run7SegDisplay+0xdc>
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	4841      	ldr	r0, [pc, #260]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000616:	f001 f803 	bl	8001620 <HAL_GPIO_WritePin>
 800061a:	e005      	b.n	8000628 <Run7SegDisplay+0xe8>
	else
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	483e      	ldr	r0, [pc, #248]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000624:	f000 fffc 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x10)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <Run7SegDisplay+0x100>
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000638:	4838      	ldr	r0, [pc, #224]	@ (800071c <Run7SegDisplay+0x1dc>)
 800063a:	f000 fff1 	bl	8001620 <HAL_GPIO_WritePin>
 800063e:	e005      	b.n	800064c <Run7SegDisplay+0x10c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000646:	4835      	ldr	r0, [pc, #212]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000648:	f000 ffea 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x8)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <Run7SegDisplay+0x124>
		HAL_GPIO_WritePin(GPIOD, PIN_7SEG_D, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800065c:	482f      	ldr	r0, [pc, #188]	@ (800071c <Run7SegDisplay+0x1dc>)
 800065e:	f000 ffdf 	bl	8001620 <HAL_GPIO_WritePin>
 8000662:	e005      	b.n	8000670 <Run7SegDisplay+0x130>
	else
		HAL_GPIO_WritePin(GPIOD, PIN_7SEG_D, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800066a:	482c      	ldr	r0, [pc, #176]	@ (800071c <Run7SegDisplay+0x1dc>)
 800066c:	f000 ffd8 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x4)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <Run7SegDisplay+0x148>
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000680:	4826      	ldr	r0, [pc, #152]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000682:	f000 ffcd 	bl	8001620 <HAL_GPIO_WritePin>
 8000686:	e005      	b.n	8000694 <Run7SegDisplay+0x154>
	else
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068e:	4823      	ldr	r0, [pc, #140]	@ (800071c <Run7SegDisplay+0x1dc>)
 8000690:	f000 ffc6 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x2)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <Run7SegDisplay+0x16c>
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a4:	481d      	ldr	r0, [pc, #116]	@ (800071c <Run7SegDisplay+0x1dc>)
 80006a6:	f000 ffbb 	bl	8001620 <HAL_GPIO_WritePin>
 80006aa:	e005      	b.n	80006b8 <Run7SegDisplay+0x178>
	else
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b2:	481a      	ldr	r0, [pc, #104]	@ (800071c <Run7SegDisplay+0x1dc>)
 80006b4:	f000 ffb4 	bl	8001620 <HAL_GPIO_WritePin>

	if (val & 0x1)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <Run7SegDisplay+0x190>
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c8:	4814      	ldr	r0, [pc, #80]	@ (800071c <Run7SegDisplay+0x1dc>)
 80006ca:	f000 ffa9 	bl	8001620 <HAL_GPIO_WritePin>
 80006ce:	e005      	b.n	80006dc <Run7SegDisplay+0x19c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d6:	4811      	ldr	r0, [pc, #68]	@ (800071c <Run7SegDisplay+0x1dc>)
 80006d8:	f000 ffa2 	bl	8001620 <HAL_GPIO_WritePin>

//	for (int i = 0; i < 8; i++) {
//	    HAL_GPIO_WritePin(GPIOD, pin[i], (val & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
//	}
	if (pos & 0x1)
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <Run7SegDisplay+0x1c8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <Run7SegDisplay+0x1b4>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2104      	movs	r1, #4
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <Run7SegDisplay+0x1cc>)
 80006ee:	f000 ff97 	bl	8001620 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 80006f2:	e004      	b.n	80006fe <Run7SegDisplay+0x1be>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <Run7SegDisplay+0x1cc>)
 80006fa:	f000 ff91 	bl	8001620 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000038 	.word	0x20000038
 800070c:	40021800 	.word	0x40021800
 8000710:	20000034 	.word	0x20000034
 8000714:	66666667 	.word	0x66666667
 8000718:	20000000 	.word	0x20000000
 800071c:	40020c00 	.word	0x40020c00

08000720 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000724:	f000 fc28 	bl	8000f78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000728:	f000 f838 	bl	800079c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800072c:	f000 f8da 	bl	80008e4 <MX_GPIO_Init>
	MX_TIM6_Init();
 8000730:	f000 f8a4 	bl	800087c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8000734:	4815      	ldr	r0, [pc, #84]	@ (800078c <main+0x6c>)
 8000736:	f001 fcb5 	bl	80020a4 <HAL_TIM_Base_Start_IT>
	Set7SegDisplayValue(0);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff feec 	bl	8000518 <Set7SegDisplayValue>
	numFlag = 0;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <main+0x70>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (numFlag) {
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <main+0x70>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d016      	beq.n	800077e <main+0x5e>
			Set7SegDisplayValue((++numDisplay) % 100);
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <main+0x74>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3301      	adds	r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4a0e      	ldr	r2, [pc, #56]	@ (8000794 <main+0x74>)
 800075c:	4619      	mov	r1, r3
 800075e:	7011      	strb	r1, [r2, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <main+0x78>)
 8000762:	fba2 1203 	umull	r1, r2, r2, r3
 8000766:	0952      	lsrs	r2, r2, #5
 8000768:	2164      	movs	r1, #100	@ 0x64
 800076a:	fb01 f202 	mul.w	r2, r1, r2
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fed0 	bl	8000518 <Set7SegDisplayValue>
			numFlag = 0;
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <main+0x70>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fc6c 	bl	800105c <HAL_Delay>
		Run7SegDisplay();
 8000784:	f7ff fedc 	bl	8000540 <Run7SegDisplay>
		if (numFlag) {
 8000788:	e7dd      	b.n	8000746 <main+0x26>
 800078a:	bf00      	nop
 800078c:	2000003c 	.word	0x2000003c
 8000790:	20000085 	.word	0x20000085
 8000794:	20000084 	.word	0x20000084
 8000798:	51eb851f 	.word	0x51eb851f

0800079c <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
}
void SystemClock_Config(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 ff48 	bl	8002640 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <SystemClock_Config+0xd8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <SystemClock_Config+0xd8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <SystemClock_Config+0xd8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <SystemClock_Config+0xdc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a24      	ldr	r2, [pc, #144]	@ (8000878 <SystemClock_Config+0xdc>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <SystemClock_Config+0xdc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000810:	23b4      	movs	r3, #180	@ 0xb4
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 ff8b 	bl	800173c <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x94>
		Error_Handler();
 800082c:	f000 facc 	bl	8000dc8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000830:	f000 ff34 	bl	800169c <HAL_PWREx_EnableOverDrive>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xa2>
		Error_Handler();
 800083a:	f000 fac5 	bl	8000dc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800084a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800084e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000854:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2105      	movs	r1, #5
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f9e5 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xd0>
		Error_Handler();
 8000868:	f000 faae 	bl	8000dc8 <Error_Handler>
	}
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	@ 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM6_Init 0 */

/* USER CODE END TIM6_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM6_Init 1 */

/* USER CODE END TIM6_Init 1 */
htim6.Instance = TIM6;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_TIM6_Init+0x60>)
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <MX_TIM6_Init+0x64>)
 800088e:	601a      	str	r2, [r3, #0]
htim6.Init.Prescaler = 80;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x60>)
 8000892:	2250      	movs	r2, #80	@ 0x50
 8000894:	605a      	str	r2, [r3, #4]
htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_TIM6_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
htim6.Init.Period = 99;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_TIM6_Init+0x60>)
 800089e:	2263      	movs	r2, #99	@ 0x63
 80008a0:	60da      	str	r2, [r3, #12]
htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <MX_TIM6_Init+0x60>)
 80008aa:	f001 fbab 	bl	8002004 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM6_Init+0x3c>
	Error_Handler();
 80008b4:	f000 fa88 	bl	8000dc8 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_TIM6_Init+0x60>)
 80008c6:	f001 fe2b 	bl	8002520 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM6_Init+0x58>
	Error_Handler();
 80008d0:	f000 fa7a 	bl	8000dc8 <Error_Handler>
}
/* USER CODE BEGIN TIM6_Init 2 */

/* USER CODE END TIM6_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000003c 	.word	0x2000003c
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	@ 0x38
 80008e8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
 80008fe:	4bb2      	ldr	r3, [pc, #712]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4ab1      	ldr	r2, [pc, #708]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4baf      	ldr	r3, [pc, #700]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	6a3b      	ldr	r3, [r7, #32]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	4bab      	ldr	r3, [pc, #684]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4aaa      	ldr	r2, [pc, #680]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4ba8      	ldr	r3, [pc, #672]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	69fb      	ldr	r3, [r7, #28]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4ba4      	ldr	r3, [pc, #656]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4aa3      	ldr	r2, [pc, #652]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4ba1      	ldr	r3, [pc, #644]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b9d      	ldr	r3, [pc, #628]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b93      	ldr	r3, [pc, #588]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a8e      	ldr	r2, [pc, #568]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b8c      	ldr	r3, [pc, #560]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b88      	ldr	r3, [pc, #544]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a87      	ldr	r2, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b85      	ldr	r3, [pc, #532]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b81      	ldr	r3, [pc, #516]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a80      	ldr	r2, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b7e      	ldr	r3, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x2e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 80009da:	2200      	movs	r2, #0
 80009dc:	2116      	movs	r1, #22
 80009de:	487b      	ldr	r0, [pc, #492]	@ (8000bcc <MX_GPIO_Init+0x2e8>)
 80009e0:	f000 fe1e 	bl	8001620 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2180      	movs	r1, #128	@ 0x80
 80009e8:	4879      	ldr	r0, [pc, #484]	@ (8000bd0 <MX_GPIO_Init+0x2ec>)
 80009ea:	f000 fe19 	bl	8001620 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD,
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80009f4:	4877      	ldr	r0, [pc, #476]	@ (8000bd4 <MX_GPIO_Init+0x2f0>)
 80009f6:	f000 fe13 	bl	8001620 <HAL_GPIO_WritePin>
		GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
				| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2 | GPIO_PIN_3 | LD3_Pin | LD4_Pin,
 80009fa:	2200      	movs	r2, #0
 80009fc:	f246 010c 	movw	r1, #24588	@ 0x600c
 8000a00:	4875      	ldr	r0, [pc, #468]	@ (8000bd8 <MX_GPIO_Init+0x2f4>)
 8000a02:	f000 fe0d 	bl	8001620 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
 A4_Pin A5_Pin SDNRAS_Pin A6_Pin
 A7_Pin A8_Pin A9_Pin */
GPIO_InitStruct.Pin = A0_Pin | A1_Pin | A2_Pin | A3_Pin | A4_Pin | A5_Pin
 8000a06:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
		| SDNRAS_Pin | A6_Pin | A7_Pin | A8_Pin | A9_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	486e      	ldr	r0, [pc, #440]	@ (8000bdc <MX_GPIO_Init+0x2f8>)
 8000a24:	f000 fc50 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
GPIO_InitStruct.Pin = SPI5_SCK_Pin | SPI5_MISO_Pin | SPI5_MOSI_Pin;
 8000a28:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4865      	ldr	r0, [pc, #404]	@ (8000bdc <MX_GPIO_Init+0x2f8>)
 8000a46:	f000 fc3f 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : ENABLE_Pin */
GPIO_InitStruct.Pin = ENABLE_Pin;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	485d      	ldr	r0, [pc, #372]	@ (8000bdc <MX_GPIO_Init+0x2f8>)
 8000a68:	f000 fc2e 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : SDNWE_Pin */
GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4851      	ldr	r0, [pc, #324]	@ (8000bcc <MX_GPIO_Init+0x2e8>)
 8000a88:	f000 fc1e 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000a8c:	2316      	movs	r3, #22
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	484a      	ldr	r0, [pc, #296]	@ (8000bcc <MX_GPIO_Init+0x2e8>)
 8000aa4:	f000 fc10 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4844      	ldr	r0, [pc, #272]	@ (8000bd0 <MX_GPIO_Init+0x2ec>)
 8000abe:	f000 fc03 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
GPIO_InitStruct.Pin = MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000ac2:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483d      	ldr	r0, [pc, #244]	@ (8000bd0 <MX_GPIO_Init+0x2ec>)
 8000ada:	f000 fbf5 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
 R5_Pin */
GPIO_InitStruct.Pin = B5_Pin | VSYNC_Pin | G2_Pin | R4_Pin | R5_Pin;
 8000ade:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af0:	230e      	movs	r3, #14
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <MX_GPIO_Init+0x2ec>)
 8000afc:	f000 fbe4 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : ACP_RST_Pin */
GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	482e      	ldr	r0, [pc, #184]	@ (8000bd0 <MX_GPIO_Init+0x2ec>)
 8000b18:	f000 fbd6 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : OTG_FS_OC_Pin */
GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b20:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4826      	ldr	r0, [pc, #152]	@ (8000bcc <MX_GPIO_Init+0x2e8>)
 8000b32:	f000 fbc9 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : R3_Pin R6_Pin */
GPIO_InitStruct.Pin = R3_Pin | R6_Pin;
 8000b36:	2303      	movs	r3, #3
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b46:	2309      	movs	r3, #9
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4823      	ldr	r0, [pc, #140]	@ (8000be0 <MX_GPIO_Init+0x2fc>)
 8000b52:	f000 fbb9 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : BOOT1_Pin */
GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b56:	2304      	movs	r3, #4
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	481d      	ldr	r0, [pc, #116]	@ (8000be0 <MX_GPIO_Init+0x2fc>)
 8000b6a:	f000 fbad 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
 SDCLK_Pin SDNCAS_Pin */
GPIO_InitStruct.Pin = A10_Pin | A11_Pin | BA0_Pin | BA1_Pin | SDCLK_Pin
 8000b6e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
		| SDNCAS_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b80:	230c      	movs	r3, #12
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4813      	ldr	r0, [pc, #76]	@ (8000bd8 <MX_GPIO_Init+0x2f4>)
 8000b8c:	f000 fb9c 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D8_Pin
 D9_Pin D10_Pin D11_Pin D12_Pin
 NBL0_Pin NBL1_Pin */
GPIO_InitStruct.Pin = D4_Pin | D5_Pin | D6_Pin | D8_Pin | D9_Pin | D10_Pin
 8000b90:	f64f 3383 	movw	r3, #64387	@ 0xfb83
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
		| D11_Pin | D12_Pin | NBL0_Pin | NBL1_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_GPIO_Init+0x300>)
 8000bae:	f000 fb8b 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
GPIO_InitStruct.Pin = G4_Pin | G5_Pin | B6_Pin | B7_Pin;
 8000bb2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000bc4:	e010      	b.n	8000be8 <MX_GPIO_Init+0x304>
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40021400 	.word	0x40021400
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021000 	.word	0x40021000
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be8:	230e      	movs	r3, #14
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4870      	ldr	r0, [pc, #448]	@ (8000db4 <MX_GPIO_Init+0x4d0>)
 8000bf4:	f000 fb68 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
GPIO_InitStruct.Pin = OTG_HS_ID_Pin | OTG_HS_DM_Pin | OTG_HS_DP_Pin;
 8000bf8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4867      	ldr	r0, [pc, #412]	@ (8000db4 <MX_GPIO_Init+0x4d0>)
 8000c16:	f000 fb57 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : VBUS_HS_Pin */
GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4861      	ldr	r0, [pc, #388]	@ (8000db4 <MX_GPIO_Init+0x4d0>)
 8000c30:	f000 fb4a 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : PD8 PD9 PD10 PD11
 PD12 PD13 PD14 PD15 */
GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8000c34:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
		| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	485a      	ldr	r0, [pc, #360]	@ (8000db8 <MX_GPIO_Init+0x4d4>)
 8000c4e:	f000 fb3b 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : PG2 PG3 LD3_Pin LD4_Pin */
GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | LD3_Pin | LD4_Pin;
 8000c52:	f246 030c 	movw	r3, #24588	@ 0x600c
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4854      	ldr	r0, [pc, #336]	@ (8000dbc <MX_GPIO_Init+0x4d8>)
 8000c6c:	f000 fb2c 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
GPIO_InitStruct.Pin = R7_Pin | DOTCLK_Pin | B3_Pin;
 8000c70:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c82:	230e      	movs	r3, #14
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	484b      	ldr	r0, [pc, #300]	@ (8000dbc <MX_GPIO_Init+0x4d8>)
 8000c8e:	f000 fb1b 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
GPIO_InitStruct.Pin = HSYNC_Pin | G6_Pin | R2_Pin;
 8000c92:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ca4:	230e      	movs	r3, #14
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4844      	ldr	r0, [pc, #272]	@ (8000dc0 <MX_GPIO_Init+0x4dc>)
 8000cb0:	f000 fb0a 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : I2C3_SDA_Pin */
GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483b      	ldr	r0, [pc, #236]	@ (8000dc0 <MX_GPIO_Init+0x4dc>)
 8000cd2:	f000 faf9 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pin : I2C3_SCL_Pin */
GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4834      	ldr	r0, [pc, #208]	@ (8000dc4 <MX_GPIO_Init+0x4e0>)
 8000cf4:	f000 fae8 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8000cf8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	482b      	ldr	r0, [pc, #172]	@ (8000dc4 <MX_GPIO_Init+0x4e0>)
 8000d16:	f000 fad7 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : D2_Pin D3_Pin */
GPIO_InitStruct.Pin = D2_Pin | D3_Pin;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4820      	ldr	r0, [pc, #128]	@ (8000db8 <MX_GPIO_Init+0x4d4>)
 8000d36:	f000 fac7 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : G7_Pin B2_Pin */
GPIO_InitStruct.Pin = G7_Pin | B2_Pin;
 8000d3a:	2348      	movs	r3, #72	@ 0x48
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d4a:	230e      	movs	r3, #14
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <MX_GPIO_Init+0x4d4>)
 8000d56:	f000 fab7 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : G3_Pin B4_Pin */
GPIO_InitStruct.Pin = G3_Pin | B4_Pin;
 8000d5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4811      	ldr	r0, [pc, #68]	@ (8000dbc <MX_GPIO_Init+0x4d8>)
 8000d78:	f000 faa6 	bl	80012c8 <HAL_GPIO_Init>

/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
GPIO_InitStruct.Pin = SDCKE1_Pin | SDNE1_Pin;
 8000d7c:	2360      	movs	r3, #96	@ 0x60
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4807      	ldr	r0, [pc, #28]	@ (8000db4 <MX_GPIO_Init+0x4d0>)
 8000d98:	f000 fa96 	bl	80012c8 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2006      	movs	r0, #6
 8000da2:	f000 fa5a 	bl	800125a <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000da6:	2006      	movs	r0, #6
 8000da8:	f000 fa73 	bl	8001292 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3738      	adds	r7, #56	@ 0x38
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40021800 	.word	0x40021800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f000 fa16 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d115      	bne.n	8000e62 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <HAL_TIM_Base_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <HAL_TIM_Base_MspInit+0x4c>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_TIM_Base_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2036      	movs	r0, #54	@ 0x36
 8000e58:	f000 f9ff 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e5c:	2036      	movs	r0, #54	@ 0x36
 8000e5e:	f000 fa18 	bl	8001292 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40001000 	.word	0x40001000
 8000e70:	40023800 	.word	0x40023800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <NMI_Handler+0x4>

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eca:	f000 f8a7 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  numFlag = 1;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <EXTI0_IRQHandler+0x14>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 fbb8 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000085 	.word	0x20000085

08000eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM6_DAC_IRQHandler+0x10>)
 8000ef2:	f001 f947 	bl	8002184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000003c 	.word	0x2000003c

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f001 fb7d 	bl	8002650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fbe3 	bl	8000720 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f68:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8000f6c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f70:	2000008c 	.word	0x2000008c

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f94f 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff ff12 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f967 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f92f 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000014 	.word	0x20000014
 8001018:	20000010 	.word	0x20000010

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000014 	.word	0x20000014
 8001040:	20000088 	.word	0x20000088

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000088 	.word	0x20000088

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000014 	.word	0x20000014

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	@ (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e177      	b.n	80015d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8166 	bne.w	80015ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80c0 	beq.w	80015ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b66      	ldr	r3, [pc, #408]	@ (80015ec <HAL_GPIO_Init+0x324>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a65      	ldr	r2, [pc, #404]	@ (80015ec <HAL_GPIO_Init+0x324>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b63      	ldr	r3, [pc, #396]	@ (80015ec <HAL_GPIO_Init+0x324>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a61      	ldr	r2, [pc, #388]	@ (80015f0 <HAL_GPIO_Init+0x328>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a58      	ldr	r2, [pc, #352]	@ (80015f4 <HAL_GPIO_Init+0x32c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d037      	beq.n	8001506 <HAL_GPIO_Init+0x23e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a57      	ldr	r2, [pc, #348]	@ (80015f8 <HAL_GPIO_Init+0x330>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d031      	beq.n	8001502 <HAL_GPIO_Init+0x23a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <HAL_GPIO_Init+0x334>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d02b      	beq.n	80014fe <HAL_GPIO_Init+0x236>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a55      	ldr	r2, [pc, #340]	@ (8001600 <HAL_GPIO_Init+0x338>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x232>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a54      	ldr	r2, [pc, #336]	@ (8001604 <HAL_GPIO_Init+0x33c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x22e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a53      	ldr	r2, [pc, #332]	@ (8001608 <HAL_GPIO_Init+0x340>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x22a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_GPIO_Init+0x344>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a51      	ldr	r2, [pc, #324]	@ (8001610 <HAL_GPIO_Init+0x348>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a50      	ldr	r2, [pc, #320]	@ (8001614 <HAL_GPIO_Init+0x34c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <HAL_GPIO_Init+0x350>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014de:	2309      	movs	r3, #9
 80014e0:	e012      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014e2:	230a      	movs	r3, #10
 80014e4:	e010      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014e6:	2308      	movs	r3, #8
 80014e8:	e00e      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00c      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e00a      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014f2:	2305      	movs	r3, #5
 80014f4:	e008      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e004      	b.n	8001508 <HAL_GPIO_Init+0x240>
 80014fe:	2302      	movs	r3, #2
 8001500:	e002      	b.n	8001508 <HAL_GPIO_Init+0x240>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_GPIO_Init+0x240>
 8001506:	2300      	movs	r3, #0
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	f002 0203 	and.w	r2, r2, #3
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	4093      	lsls	r3, r2
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001518:	4935      	ldr	r1, [pc, #212]	@ (80015f0 <HAL_GPIO_Init+0x328>)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_GPIO_Init+0x354>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154a:	4a34      	ldr	r2, [pc, #208]	@ (800161c <HAL_GPIO_Init+0x354>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_GPIO_Init+0x354>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001574:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_GPIO_Init+0x354>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157a:	4b28      	ldr	r3, [pc, #160]	@ (800161c <HAL_GPIO_Init+0x354>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159e:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <HAL_GPIO_Init+0x354>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_GPIO_Init+0x354>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_GPIO_Init+0x354>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	f67f ae84 	bls.w	80012e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3724      	adds	r7, #36	@ 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013800 	.word	0x40013800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40021000 	.word	0x40021000
 8001608:	40021400 	.word	0x40021400
 800160c:	40021800 	.word	0x40021800
 8001610:	40021c00 	.word	0x40021c00
 8001614:	40022000 	.word	0x40022000
 8001618:	40022400 	.word	0x40022400
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f806 	bl	8001684 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_PWREx_EnableOverDrive+0x90>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a1f      	ldr	r2, [pc, #124]	@ (800172c <HAL_PWREx_EnableOverDrive+0x90>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_PWREx_EnableOverDrive+0x90>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_PWREx_EnableOverDrive+0x94>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c8:	f7ff fcbc 	bl	8001044 <HAL_GetTick>
 80016cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016ce:	e009      	b.n	80016e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016d0:	f7ff fcb8 	bl	8001044 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016de:	d901      	bls.n	80016e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e01f      	b.n	8001724 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <HAL_PWREx_EnableOverDrive+0x98>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d1ee      	bne.n	80016d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fca4 	bl	8001044 <HAL_GetTick>
 80016fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016fe:	e009      	b.n	8001714 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001700:	f7ff fca0 	bl	8001044 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800170e:	d901      	bls.n	8001714 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e007      	b.n	8001724 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <HAL_PWREx_EnableOverDrive+0x98>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001720:	d1ee      	bne.n	8001700 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	420e0040 	.word	0x420e0040
 8001734:	40007000 	.word	0x40007000
 8001738:	420e0044 	.word	0x420e0044

0800173c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e267      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d075      	beq.n	8001846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800175a:	4b88      	ldr	r3, [pc, #544]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b04      	cmp	r3, #4
 8001764:	d00c      	beq.n	8001780 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001766:	4b85      	ldr	r3, [pc, #532]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800176e:	2b08      	cmp	r3, #8
 8001770:	d112      	bne.n	8001798 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001772:	4b82      	ldr	r3, [pc, #520]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800177e:	d10b      	bne.n	8001798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4b7e      	ldr	r3, [pc, #504]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d05b      	beq.n	8001844 <HAL_RCC_OscConfig+0x108>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d157      	bne.n	8001844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e242      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x74>
 80017a2:	4b76      	ldr	r3, [pc, #472]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a75      	ldr	r2, [pc, #468]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b70      	ldr	r3, [pc, #448]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6f      	ldr	r2, [pc, #444]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6c      	ldr	r2, [pc, #432]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017d4:	4b69      	ldr	r3, [pc, #420]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a68      	ldr	r2, [pc, #416]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b66      	ldr	r3, [pc, #408]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a65      	ldr	r2, [pc, #404]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc26 	bl	8001044 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fc22 	bl	8001044 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e207      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b5b      	ldr	r3, [pc, #364]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xc0>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fc12 	bl	8001044 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fc0e 	bl	8001044 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1f3      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b51      	ldr	r3, [pc, #324]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0xe8>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001852:	4b4a      	ldr	r3, [pc, #296]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001866:	2b08      	cmp	r3, #8
 8001868:	d11c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186a:	4b44      	ldr	r3, [pc, #272]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b41      	ldr	r3, [pc, #260]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x152>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1c7      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4937      	ldr	r1, [pc, #220]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e03a      	b.n	800191a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <HAL_RCC_OscConfig+0x244>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fbc7 	bl	8001044 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fbc3 	bl	8001044 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1a8      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b28      	ldr	r3, [pc, #160]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4925      	ldr	r1, [pc, #148]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_RCC_OscConfig+0x244>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fba6 	bl	8001044 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fba2 	bl	8001044 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e187      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d036      	beq.n	8001994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_RCC_OscConfig+0x248>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff fb86 	bl	8001044 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fb82 	bl	8001044 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e167      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_OscConfig+0x240>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x200>
 800195a:	e01b      	b.n	8001994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_OscConfig+0x248>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff fb6f 	bl	8001044 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	e00e      	b.n	8001988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff fb6b 	bl	8001044 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d907      	bls.n	8001988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e150      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
 800197c:	40023800 	.word	0x40023800
 8001980:	42470000 	.word	0x42470000
 8001984:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4b88      	ldr	r3, [pc, #544]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 800198a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ea      	bne.n	800196a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8097 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	4b81      	ldr	r3, [pc, #516]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a7c      	ldr	r2, [pc, #496]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b77      	ldr	r3, [pc, #476]	@ (8001bb0 <HAL_RCC_OscConfig+0x474>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b74      	ldr	r3, [pc, #464]	@ (8001bb0 <HAL_RCC_OscConfig+0x474>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a73      	ldr	r2, [pc, #460]	@ (8001bb0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb2b 	bl	8001044 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7ff fb27 	bl	8001044 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e10c      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_OscConfig+0x474>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2ea>
 8001a18:	4b64      	ldr	r3, [pc, #400]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a63      	ldr	r2, [pc, #396]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x324>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x30c>
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a32:	4a5e      	ldr	r2, [pc, #376]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x324>
 8001a48:	4b58      	ldr	r3, [pc, #352]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a54:	4b55      	ldr	r3, [pc, #340]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a54      	ldr	r2, [pc, #336]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a5a:	f023 0304 	bic.w	r3, r3, #4
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d015      	beq.n	8001a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff faec 	bl	8001044 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a70:	f7ff fae8 	bl	8001044 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0cb      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ee      	beq.n	8001a70 <HAL_RCC_OscConfig+0x334>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fad6 	bl	8001044 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fad2 	bl	8001044 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0b5      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	4a38      	ldr	r2, [pc, #224]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a1 	beq.w	8001c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ada:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d05c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d141      	bne.n	8001b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <HAL_RCC_OscConfig+0x478>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff faa6 	bl	8001044 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff faa2 	bl	8001044 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e087      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0e:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	3b01      	subs	r3, #1
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	491b      	ldr	r1, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_RCC_OscConfig+0x478>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa7b 	bl	8001044 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fa77 	bl	8001044 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e05c      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x416>
 8001b70:	e054      	b.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_RCC_OscConfig+0x478>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa64 	bl	8001044 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff fa60 	bl	8001044 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e045      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_RCC_OscConfig+0x470>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x444>
 8001b9e:	e03d      	b.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e038      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4ec>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d028      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d121      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d11a      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001be8:	4013      	ands	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d111      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	3b01      	subs	r3, #1
 8001c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cc      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b68      	ldr	r3, [pc, #416]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d90c      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b65      	ldr	r3, [pc, #404]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d044      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d119      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e067      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4934      	ldr	r1, [pc, #208]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff f992 	bl	8001044 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff f98e 	bl	8001044 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e04f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d20c      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	@ (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f8f2 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00
 8001de8:	40023800 	.word	0x40023800
 8001dec:	080026b0 	.word	0x080026b0
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000010 	.word	0x20000010

08001df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b094      	sub	sp, #80	@ 0x50
 8001dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e10:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d00d      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x40>
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	f200 80e1 	bhi.w	8001fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x34>
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2a:	e0db      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b73      	ldr	r3, [pc, #460]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e30:	e0db      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e32:	4b73      	ldr	r3, [pc, #460]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e36:	e0d8      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e38:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e42:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d063      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	2200      	movs	r2, #0
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	0159      	lsls	r1, r3, #5
 8001e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7c:	0150      	lsls	r0, r2, #5
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4621      	mov	r1, r4
 8001e84:	1a51      	subs	r1, r2, r1
 8001e86:	6139      	str	r1, [r7, #16]
 8001e88:	4629      	mov	r1, r5
 8001e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	018b      	lsls	r3, r1, #6
 8001ea0:	4651      	mov	r1, sl
 8001ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea6:	4651      	mov	r1, sl
 8001ea8:	018a      	lsls	r2, r1, #6
 8001eaa:	4651      	mov	r1, sl
 8001eac:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eca:	4690      	mov	r8, r2
 8001ecc:	4699      	mov	r9, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	eb18 0303 	adds.w	r3, r8, r3
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	eb49 0303 	adc.w	r3, r9, r3
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eea:	4629      	mov	r1, r5
 8001eec:	024b      	lsls	r3, r1, #9
 8001eee:	4621      	mov	r1, r4
 8001ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	024a      	lsls	r2, r1, #9
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efe:	2200      	movs	r2, #0
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f08:	f7fe f970 	bl	80001ec <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f14:	e058      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	4611      	mov	r1, r2
 8001f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f30:	4642      	mov	r2, r8
 8001f32:	464b      	mov	r3, r9
 8001f34:	f04f 0000 	mov.w	r0, #0
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	0159      	lsls	r1, r3, #5
 8001f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f42:	0150      	lsls	r0, r2, #5
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4641      	mov	r1, r8
 8001f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f4e:	4649      	mov	r1, r9
 8001f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f68:	ebb2 040a 	subs.w	r4, r2, sl
 8001f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	00eb      	lsls	r3, r5, #3
 8001f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f7e:	00e2      	lsls	r2, r4, #3
 8001f80:	4614      	mov	r4, r2
 8001f82:	461d      	mov	r5, r3
 8001f84:	4643      	mov	r3, r8
 8001f86:	18e3      	adds	r3, r4, r3
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	eb45 0303 	adc.w	r3, r5, r3
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	028b      	lsls	r3, r1, #10
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fa8:	4621      	mov	r1, r4
 8001faa:	028a      	lsls	r2, r1, #10
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	61fa      	str	r2, [r7, #28]
 8001fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fbc:	f7fe f916 	bl	80001ec <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	0c1b      	lsrs	r3, r3, #16
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fe2:	e002      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3750      	adds	r7, #80	@ 0x50
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e041      	b.n	800209a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fefa 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 f9c0 	bl	80023c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04e      	b.n	800215a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <HAL_TIM_Base_Start_IT+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d022      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e6:	d01d      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <HAL_TIM_Base_Start_IT+0xc8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d018      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <HAL_TIM_Base_Start_IT+0xcc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <HAL_TIM_Base_Start_IT+0xd0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <HAL_TIM_Base_Start_IT+0xd4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_TIM_Base_Start_IT+0xd8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_TIM_Base_Start_IT+0xdc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d111      	bne.n	8002148 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b06      	cmp	r3, #6
 8002134:	d010      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	e007      	b.n	8002158 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40010400 	.word	0x40010400
 800217c:	40014000 	.word	0x40014000
 8002180:	40001800 	.word	0x40001800

08002184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0202 	mvn.w	r2, #2
 80021b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8dc 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8ce 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8df 	bl	80023a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0204 	mvn.w	r2, #4
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8b6 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8a8 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8b9 	bl	80023a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0208 	mvn.w	r2, #8
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f890 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f882 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f893 	bl	80023a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f86a 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f85c 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f86d 	bl	80023a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f83a 	bl	8002364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f98c 	bl	800262c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f83e 	bl	80023b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0220 	mvn.w	r2, #32
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f95e 	bl	8002618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <TIM_Base_SetConfig+0x12c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e6:	d00f      	beq.n	8002408 <TIM_Base_SetConfig+0x40>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a43      	ldr	r2, [pc, #268]	@ (80024f8 <TIM_Base_SetConfig+0x130>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00b      	beq.n	8002408 <TIM_Base_SetConfig+0x40>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a42      	ldr	r2, [pc, #264]	@ (80024fc <TIM_Base_SetConfig+0x134>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <TIM_Base_SetConfig+0x40>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a41      	ldr	r2, [pc, #260]	@ (8002500 <TIM_Base_SetConfig+0x138>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d003      	beq.n	8002408 <TIM_Base_SetConfig+0x40>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a40      	ldr	r2, [pc, #256]	@ (8002504 <TIM_Base_SetConfig+0x13c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d108      	bne.n	800241a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a35      	ldr	r2, [pc, #212]	@ (80024f4 <TIM_Base_SetConfig+0x12c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02b      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002428:	d027      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <TIM_Base_SetConfig+0x130>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d023      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a31      	ldr	r2, [pc, #196]	@ (80024fc <TIM_Base_SetConfig+0x134>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a30      	ldr	r2, [pc, #192]	@ (8002500 <TIM_Base_SetConfig+0x138>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01b      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <TIM_Base_SetConfig+0x13c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d017      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a2e      	ldr	r2, [pc, #184]	@ (8002508 <TIM_Base_SetConfig+0x140>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <TIM_Base_SetConfig+0x144>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00f      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2c      	ldr	r2, [pc, #176]	@ (8002510 <TIM_Base_SetConfig+0x148>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00b      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2b      	ldr	r2, [pc, #172]	@ (8002514 <TIM_Base_SetConfig+0x14c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <TIM_Base_SetConfig+0x150>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d003      	beq.n	800247a <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a29      	ldr	r2, [pc, #164]	@ (800251c <TIM_Base_SetConfig+0x154>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <TIM_Base_SetConfig+0x12c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0xf8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <TIM_Base_SetConfig+0x13c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d103      	bne.n	80024c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f023 0201 	bic.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
  }
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40010400 	.word	0x40010400
 8002508:	40014000 	.word	0x40014000
 800250c:	40014400 	.word	0x40014400
 8002510:	40014800 	.word	0x40014800
 8002514:	40001800 	.word	0x40001800
 8002518:	40001c00 	.word	0x40001c00
 800251c:	40002000 	.word	0x40002000

08002520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002534:	2302      	movs	r3, #2
 8002536:	e05a      	b.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a21      	ldr	r2, [pc, #132]	@ (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002584:	d01d      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d018      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1b      	ldr	r2, [pc, #108]	@ (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a18      	ldr	r2, [pc, #96]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10c      	bne.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40010000 	.word	0x40010000
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800
 8002608:	40000c00 	.word	0x40000c00
 800260c:	40010400 	.word	0x40010400
 8002610:	40014000 	.word	0x40014000
 8002614:	40001800 	.word	0x40001800

08002618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <memset>:
 8002640:	4402      	add	r2, r0
 8002642:	4603      	mov	r3, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	d100      	bne.n	800264a <memset+0xa>
 8002648:	4770      	bx	lr
 800264a:	f803 1b01 	strb.w	r1, [r3], #1
 800264e:	e7f9      	b.n	8002644 <memset+0x4>

08002650 <__libc_init_array>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4d0d      	ldr	r5, [pc, #52]	@ (8002688 <__libc_init_array+0x38>)
 8002654:	4c0d      	ldr	r4, [pc, #52]	@ (800268c <__libc_init_array+0x3c>)
 8002656:	1b64      	subs	r4, r4, r5
 8002658:	10a4      	asrs	r4, r4, #2
 800265a:	2600      	movs	r6, #0
 800265c:	42a6      	cmp	r6, r4
 800265e:	d109      	bne.n	8002674 <__libc_init_array+0x24>
 8002660:	4d0b      	ldr	r5, [pc, #44]	@ (8002690 <__libc_init_array+0x40>)
 8002662:	4c0c      	ldr	r4, [pc, #48]	@ (8002694 <__libc_init_array+0x44>)
 8002664:	f000 f818 	bl	8002698 <_init>
 8002668:	1b64      	subs	r4, r4, r5
 800266a:	10a4      	asrs	r4, r4, #2
 800266c:	2600      	movs	r6, #0
 800266e:	42a6      	cmp	r6, r4
 8002670:	d105      	bne.n	800267e <__libc_init_array+0x2e>
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	f855 3b04 	ldr.w	r3, [r5], #4
 8002678:	4798      	blx	r3
 800267a:	3601      	adds	r6, #1
 800267c:	e7ee      	b.n	800265c <__libc_init_array+0xc>
 800267e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002682:	4798      	blx	r3
 8002684:	3601      	adds	r6, #1
 8002686:	e7f2      	b.n	800266e <__libc_init_array+0x1e>
 8002688:	080026c8 	.word	0x080026c8
 800268c:	080026c8 	.word	0x080026c8
 8002690:	080026c8 	.word	0x080026c8
 8002694:	080026cc 	.word	0x080026cc

08002698 <_init>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr

080026a4 <_fini>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr
