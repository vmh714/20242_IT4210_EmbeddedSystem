
IrRemoteControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003968  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003b18  08003b18  00004b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb4  08003bb4  0000507c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bbc  08003bbc  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bbc  08003bbc  00004bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003bc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000507c  2**0
                  CONTENTS
 10 .bss          000002a0  2000007c  2000007c  0000507c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000031c  2000031c  0000507c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d30d  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f02  00000000  00000000  000123b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000142c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cf  00000000  00000000  00014f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c02  00000000  00000000  00015927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ead7  00000000  00000000  00039529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da5e2  00000000  00000000  00048000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001225e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000397c  00000000  00000000  00122628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c8  00000000  00000000  00125fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b00 	.word	0x08003b00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08003b00 	.word	0x08003b00

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Set7SegDisplayValue>:
						0b01111101, //6
						0b00000111, //7
						0b01111111, //8
						0b01101111};//9                                                       0
void Set7SegDisplayValue(int val)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	DisplayValue = val;
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <Set7SegDisplayValue+0x20>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
	pos = 0;
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <Set7SegDisplayValue+0x24>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000098 	.word	0x20000098
 8000610:	2000009c 	.word	0x2000009c

08000614 <Run7SegDisplay>:
//uint16_t pin[] = {PIN_7SEG_A, PIN_7SEG_B, PIN_7SEG_C, PIN_7SEG_D,
//                  PIN_7SEG_E, PIN_7SEG_F, PIN_7SEG_G, PIN_7SEG_P};

void Run7SegDisplay()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	unsigned char val;
	pos++;
 800061a:	4b70      	ldr	r3, [pc, #448]	@ (80007dc <Run7SegDisplay+0x1c8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a6e      	ldr	r2, [pc, #440]	@ (80007dc <Run7SegDisplay+0x1c8>)
 8000622:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	486d      	ldr	r0, [pc, #436]	@ (80007e0 <Run7SegDisplay+0x1cc>)
 800062a:	f001 f95f 	bl	80018ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	486b      	ldr	r0, [pc, #428]	@ (80007e0 <Run7SegDisplay+0x1cc>)
 8000634:	f001 f95a 	bl	80018ec <HAL_GPIO_WritePin>

	if (pos & 0x1)
 8000638:	4b68      	ldr	r3, [pc, #416]	@ (80007dc <Run7SegDisplay+0x1c8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d010      	beq.n	8000666 <Run7SegDisplay+0x52>
		val = Mask[DisplayValue % 10];
 8000644:	4b67      	ldr	r3, [pc, #412]	@ (80007e4 <Run7SegDisplay+0x1d0>)
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	4b67      	ldr	r3, [pc, #412]	@ (80007e8 <Run7SegDisplay+0x1d4>)
 800064a:	fb83 2301 	smull	r2, r3, r3, r1
 800064e:	109a      	asrs	r2, r3, #2
 8000650:	17cb      	asrs	r3, r1, #31
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	1aca      	subs	r2, r1, r3
 800065e:	4b63      	ldr	r3, [pc, #396]	@ (80007ec <Run7SegDisplay+0x1d8>)
 8000660:	5c9b      	ldrb	r3, [r3, r2]
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	e015      	b.n	8000692 <Run7SegDisplay+0x7e>
	else
		val = Mask[(DisplayValue / 10) % 10];
 8000666:	4b5f      	ldr	r3, [pc, #380]	@ (80007e4 <Run7SegDisplay+0x1d0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a5f      	ldr	r2, [pc, #380]	@ (80007e8 <Run7SegDisplay+0x1d4>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	1092      	asrs	r2, r2, #2
 8000672:	17db      	asrs	r3, r3, #31
 8000674:	1ad1      	subs	r1, r2, r3
 8000676:	4b5c      	ldr	r3, [pc, #368]	@ (80007e8 <Run7SegDisplay+0x1d4>)
 8000678:	fb83 2301 	smull	r2, r3, r3, r1
 800067c:	109a      	asrs	r2, r3, #2
 800067e:	17cb      	asrs	r3, r1, #31
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	1aca      	subs	r2, r1, r3
 800068c:	4b57      	ldr	r3, [pc, #348]	@ (80007ec <Run7SegDisplay+0x1d8>)
 800068e:	5c9b      	ldrb	r3, [r3, r2]
 8000690:	71fb      	strb	r3, [r7, #7]

	if (val & 0x80)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	da06      	bge.n	80006a8 <Run7SegDisplay+0x94>
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a0:	4853      	ldr	r0, [pc, #332]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006a2:	f001 f923 	bl	80018ec <HAL_GPIO_WritePin>
 80006a6:	e005      	b.n	80006b4 <Run7SegDisplay+0xa0>
	else
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4850      	ldr	r0, [pc, #320]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006b0:	f001 f91c 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x40)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <Run7SegDisplay+0xb8>
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c4:	484a      	ldr	r0, [pc, #296]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006c6:	f001 f911 	bl	80018ec <HAL_GPIO_WritePin>
 80006ca:	e005      	b.n	80006d8 <Run7SegDisplay+0xc4>
	else
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006d2:	4847      	ldr	r0, [pc, #284]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006d4:	f001 f90a 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x20)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <Run7SegDisplay+0xdc>
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	4841      	ldr	r0, [pc, #260]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006ea:	f001 f8ff 	bl	80018ec <HAL_GPIO_WritePin>
 80006ee:	e005      	b.n	80006fc <Run7SegDisplay+0xe8>
	else
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f6:	483e      	ldr	r0, [pc, #248]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80006f8:	f001 f8f8 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x10)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <Run7SegDisplay+0x100>
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070c:	4838      	ldr	r0, [pc, #224]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 800070e:	f001 f8ed 	bl	80018ec <HAL_GPIO_WritePin>
 8000712:	e005      	b.n	8000720 <Run7SegDisplay+0x10c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071a:	4835      	ldr	r0, [pc, #212]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 800071c:	f001 f8e6 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x8)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <Run7SegDisplay+0x124>
		HAL_GPIO_WritePin(GPIOE, PIN_7SEG_D, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000730:	482f      	ldr	r0, [pc, #188]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 8000732:	f001 f8db 	bl	80018ec <HAL_GPIO_WritePin>
 8000736:	e005      	b.n	8000744 <Run7SegDisplay+0x130>
	else
		HAL_GPIO_WritePin(GPIOE, PIN_7SEG_D, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 8000740:	f001 f8d4 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x4)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <Run7SegDisplay+0x148>
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000754:	4826      	ldr	r0, [pc, #152]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 8000756:	f001 f8c9 	bl	80018ec <HAL_GPIO_WritePin>
 800075a:	e005      	b.n	8000768 <Run7SegDisplay+0x154>
	else
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000762:	4823      	ldr	r0, [pc, #140]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 8000764:	f001 f8c2 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x2)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <Run7SegDisplay+0x16c>
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000778:	481d      	ldr	r0, [pc, #116]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 800077a:	f001 f8b7 	bl	80018ec <HAL_GPIO_WritePin>
 800077e:	e005      	b.n	800078c <Run7SegDisplay+0x178>
	else
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000786:	481a      	ldr	r0, [pc, #104]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 8000788:	f001 f8b0 	bl	80018ec <HAL_GPIO_WritePin>

	if (val & 0x1)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <Run7SegDisplay+0x190>
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 800079e:	f001 f8a5 	bl	80018ec <HAL_GPIO_WritePin>
 80007a2:	e005      	b.n	80007b0 <Run7SegDisplay+0x19c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007aa:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <Run7SegDisplay+0x1dc>)
 80007ac:	f001 f89e 	bl	80018ec <HAL_GPIO_WritePin>

//	for (int i = 0; i < 8; i++) {
//	    HAL_GPIO_WritePin(GPIOD, pin[i], (val & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
//	}
	if (pos & 0x1)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <Run7SegDisplay+0x1c8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <Run7SegDisplay+0x1b4>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <Run7SegDisplay+0x1cc>)
 80007c2:	f001 f893 	bl	80018ec <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 80007c6:	e004      	b.n	80007d2 <Run7SegDisplay+0x1be>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2108      	movs	r1, #8
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <Run7SegDisplay+0x1cc>)
 80007ce:	f001 f88d 	bl	80018ec <HAL_GPIO_WritePin>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	40021800 	.word	0x40021800
 80007e4:	20000098 	.word	0x20000098
 80007e8:	66666667 	.word	0x66666667
 80007ec:	20000000 	.word	0x20000000
 80007f0:	40021000 	.word	0x40021000

080007f4 <IrGetBitTime>:
int bit_count;
int command_ok;
unsigned char irda_cmd[4];

void IrGetBitTime()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	  if (tim6_count > 100)
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <IrGetBitTime+0x60>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b64      	cmp	r3, #100	@ 0x64
 80007fe:	dd08      	ble.n	8000812 <IrGetBitTime+0x1e>
	  {
		  bit_count = 0;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <IrGetBitTime+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800080c:	4813      	ldr	r0, [pc, #76]	@ (800085c <IrGetBitTime+0x68>)
 800080e:	f001 f86d 	bl	80018ec <HAL_GPIO_WritePin>
	  }

	  bit_time[bit_count] = tim6_count;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <IrGetBitTime+0x64>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <IrGetBitTime+0x60>)
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	4911      	ldr	r1, [pc, #68]	@ (8000860 <IrGetBitTime+0x6c>)
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  tim6_count = 0;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <IrGetBitTime+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
	  bit_count++;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <IrGetBitTime+0x64>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <IrGetBitTime+0x64>)
 800082e:	6013      	str	r3, [r2, #0]

	  if (bit_count == 33)
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <IrGetBitTime+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b21      	cmp	r3, #33	@ 0x21
 8000836:	d10b      	bne.n	8000850 <IrGetBitTime+0x5c>
	  {
		  bit_count = 0;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <IrGetBitTime+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <IrGetBitTime+0x68>)
 8000846:	f001 f851 	bl	80018ec <HAL_GPIO_WritePin>
		  command_ok = 1;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <IrGetBitTime+0x70>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
	  }
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200001c0 	.word	0x200001c0
 8000858:	20000124 	.word	0x20000124
 800085c:	40021800 	.word	0x40021800
 8000860:	200000a0 	.word	0x200000a0
 8000864:	20000128 	.word	0x20000128

08000868 <IrDecode>:

void IrDecode()
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
  unsigned char code;
  int bit, key, index = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  for (key = 0; key < 4; key++)
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e020      	b.n	80008ba <IrDecode+0x52>
  {
	  for (bit = 0; bit < 8; bit++)
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	e012      	b.n	80008a4 <IrDecode+0x3c>
	  {
		  code >>= 1;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
		  index++;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	603b      	str	r3, [r7, #0]
		  if (bit_time[index] > 20)
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <IrDecode+0x68>)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	2b14      	cmp	r3, #20
 8000894:	dd03      	ble.n	800089e <IrDecode+0x36>
			  code |= 0x80;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800089c:	73fb      	strb	r3, [r7, #15]
	  for (bit = 0; bit < 8; bit++)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	dde9      	ble.n	800087e <IrDecode+0x16>
	  }
	  irda_cmd[key] = code;
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <IrDecode+0x6c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	701a      	strb	r2, [r3, #0]
  for (key = 0; key < 4; key++)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	dddb      	ble.n	8000878 <IrDecode+0x10>
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200000a0 	.word	0x200000a0
 80008d4:	2000012c 	.word	0x2000012c

080008d8 <getMode>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
uint8_t getMode(char *s) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (strcmp(s, "00ff44bb\n") == 0)
 80008e0:	4914      	ldr	r1, [pc, #80]	@ (8000934 <getMode+0x5c>)
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fc84 	bl	80001f0 <strcmp>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <getMode+0x1a>
		return 4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	e01b      	b.n	800092a <getMode+0x52>
	else if (strcmp(s, "00ff45ba\n") == 0)
 80008f2:	4911      	ldr	r1, [pc, #68]	@ (8000938 <getMode+0x60>)
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fc7b 	bl	80001f0 <strcmp>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <getMode+0x2c>
		return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e012      	b.n	800092a <getMode+0x52>
	else if (strcmp(s, "00ff46b9\n") == 0)
 8000904:	490d      	ldr	r1, [pc, #52]	@ (800093c <getMode+0x64>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fc72 	bl	80001f0 <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <getMode+0x3e>
		return 2;
 8000912:	2302      	movs	r3, #2
 8000914:	e009      	b.n	800092a <getMode+0x52>
	else if (strcmp(s, "00ff47b8\n") == 0)
 8000916:	490a      	ldr	r1, [pc, #40]	@ (8000940 <getMode+0x68>)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff fc69 	bl	80001f0 <strcmp>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <getMode+0x50>
		return 3;
 8000924:	2303      	movs	r3, #3
 8000926:	e000      	b.n	800092a <getMode+0x52>
	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08003b18 	.word	0x08003b18
 8000938:	08003b24 	.word	0x08003b24
 800093c:	08003b30 	.word	0x08003b30
 8000940:	08003b3c 	.word	0x08003b3c

08000944 <setLEDsMode1>:
uint8_t setLEDsMode1() {
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

	value1 = (value1 << 1) | (value1 >> 7);
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <setLEDsMode1+0x30>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	b25a      	sxtb	r2, r3
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <setLEDsMode1+0x30>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	09db      	lsrs	r3, r3, #7
 8000958:	b2db      	uxtb	r3, r3
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b25b      	sxtb	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <setLEDsMode1+0x30>)
 8000964:	701a      	strb	r2, [r3, #0]
	return value1;
 8000966:	4b03      	ldr	r3, [pc, #12]	@ (8000974 <setLEDsMode1+0x30>)
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	2000000b 	.word	0x2000000b

08000978 <setLEDsMode2>:
uint8_t setLEDsMode2() {
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

	value2 = (value2 >> 1) | (value2 << 7);
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <setLEDsMode2+0x30>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b25a      	sxtb	r2, r3
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <setLEDsMode2+0x30>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	01db      	lsls	r3, r3, #7
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <setLEDsMode2+0x30>)
 8000998:	701a      	strb	r2, [r3, #0]
	return value2;
 800099a:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <setLEDsMode2+0x30>)
 800099c:	781b      	ldrb	r3, [r3, #0]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	2000000c 	.word	0x2000000c

080009ac <setLEDsMode3>:
uint8_t setLEDsMode3() {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	//static int value3 = 0xFF;
	value3 = ~value3;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <setLEDsMode3+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <setLEDsMode3+0x20>)
 80009ba:	701a      	strb	r2, [r3, #0]
	return value3;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <setLEDsMode3+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000000d 	.word	0x2000000d

080009d0 <setLEDsMode4>:
uint8_t setLEDsMode4() {
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	value4 = value4 % 10;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <setLEDsMode4+0x3c>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <setLEDsMode4+0x40>)
 80009da:	fba3 1302 	umull	r1, r3, r3, r2
 80009de:	08d9      	lsrs	r1, r3, #3
 80009e0:	460b      	mov	r3, r1
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <setLEDsMode4+0x3c>)
 80009ee:	701a      	strb	r2, [r3, #0]
	return frames[value4++];
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <setLEDsMode4+0x3c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	b2d1      	uxtb	r1, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <setLEDsMode4+0x3c>)
 80009fa:	7011      	strb	r1, [r2, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <setLEDsMode4+0x44>)
 8000a00:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	200001c5 	.word	0x200001c5
 8000a10:	cccccccd 	.word	0xcccccccd
 8000a14:	08003b5c 	.word	0x08003b5c

08000a18 <DisplayLEDs>:
uint8_t (*setLEDsMode[])() = {setLEDsMode1, setLEDsMode2, setLEDsMode3, setLEDsMode4};
void DisplayLEDs(uint8_t mode) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	LED_Value = setLEDsMode[mode]();
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a55      	ldr	r2, [pc, #340]	@ (8000b7c <DisplayLEDs+0x164>)
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	4798      	blx	r3
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b53      	ldr	r3, [pc, #332]	@ (8000b80 <DisplayLEDs+0x168>)
 8000a32:	701a      	strb	r2, [r3, #0]
	if (LED_Value & 0x80)
 8000a34:	4b52      	ldr	r3, [pc, #328]	@ (8000b80 <DisplayLEDs+0x168>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	da06      	bge.n	8000a4e <DisplayLEDs+0x36>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a46:	484f      	ldr	r0, [pc, #316]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000a48:	f000 ff50 	bl	80018ec <HAL_GPIO_WritePin>
 8000a4c:	e005      	b.n	8000a5a <DisplayLEDs+0x42>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a54:	484b      	ldr	r0, [pc, #300]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000a56:	f000 ff49 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x40)
 8000a5a:	4b49      	ldr	r3, [pc, #292]	@ (8000b80 <DisplayLEDs+0x168>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <DisplayLEDs+0x5e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6e:	4845      	ldr	r0, [pc, #276]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000a70:	f000 ff3c 	bl	80018ec <HAL_GPIO_WritePin>
 8000a74:	e005      	b.n	8000a82 <DisplayLEDs+0x6a>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7c:	4841      	ldr	r0, [pc, #260]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000a7e:	f000 ff35 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x20)
 8000a82:	4b3f      	ldr	r3, [pc, #252]	@ (8000b80 <DisplayLEDs+0x168>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <DisplayLEDs+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a96:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000a98:	f000 ff28 	bl	80018ec <HAL_GPIO_WritePin>
 8000a9c:	e005      	b.n	8000aaa <DisplayLEDs+0x92>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa4:	4837      	ldr	r0, [pc, #220]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000aa6:	f000 ff21 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x10)
 8000aaa:	4b35      	ldr	r3, [pc, #212]	@ (8000b80 <DisplayLEDs+0x168>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <DisplayLEDs+0xae>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abe:	4831      	ldr	r0, [pc, #196]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000ac0:	f000 ff14 	bl	80018ec <HAL_GPIO_WritePin>
 8000ac4:	e005      	b.n	8000ad2 <DisplayLEDs+0xba>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000acc:	482d      	ldr	r0, [pc, #180]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000ace:	f000 ff0d 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x8)
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <DisplayLEDs+0x168>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <DisplayLEDs+0xd6>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae6:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000ae8:	f000 ff00 	bl	80018ec <HAL_GPIO_WritePin>
 8000aec:	e005      	b.n	8000afa <DisplayLEDs+0xe2>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000af4:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000af6:	f000 fef9 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x4)
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <DisplayLEDs+0x168>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <DisplayLEDs+0xfe>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0e:	481d      	ldr	r0, [pc, #116]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b10:	f000 feec 	bl	80018ec <HAL_GPIO_WritePin>
 8000b14:	e005      	b.n	8000b22 <DisplayLEDs+0x10a>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b1c:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b1e:	f000 fee5 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x2)
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <DisplayLEDs+0x168>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <DisplayLEDs+0x126>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b38:	f000 fed8 	bl	80018ec <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <DisplayLEDs+0x132>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	480f      	ldr	r0, [pc, #60]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b46:	f000 fed1 	bl	80018ec <HAL_GPIO_WritePin>
	if (LED_Value & 0x1)
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <DisplayLEDs+0x168>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <DisplayLEDs+0x14e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5e:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b60:	f000 fec4 	bl	80018ec <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}
 8000b64:	e005      	b.n	8000b72 <DisplayLEDs+0x15a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <DisplayLEDs+0x16c>)
 8000b6e:	f000 febd 	bl	80018ec <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000010 	.word	0x20000010
 8000b80:	200001c4 	.word	0x200001c4
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b0c3      	sub	sp, #268	@ 0x10c
 8000b8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fb59 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f87f 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f94b 	bl	8000e30 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000b9a:	f000 f8eb 	bl	8000d74 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000b9e:	f000 f91d 	bl	8000ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8000ba2:	4832      	ldr	r0, [pc, #200]	@ (8000c6c <main+0xe4>)
 8000ba4:	f001 fc32 	bl	800240c <HAL_TIM_Base_Start_IT>
	command_ok = 0;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <main+0xe8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
	Set7SegDisplayValue(0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fd1c 	bl	80005ec <Set7SegDisplayValue>
	tim6_count = 0;
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <main+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
	LED_Value = 1;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <main+0xf0>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
	lastCurrentTime = 0;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <main+0xf4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//turn off 2 LEDs
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bca:	482d      	ldr	r0, [pc, #180]	@ (8000c80 <main+0xf8>)
 8000bcc:	f000 fea7 	bl	800191e <HAL_GPIO_TogglePin>
		//delay
		HAL_Delay(5);
 8000bd0:	2005      	movs	r0, #5
 8000bd2:	f000 fba9 	bl	8001328 <HAL_Delay>

		if (command_ok) {
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <main+0xe8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d02f      	beq.n	8000c3e <main+0xb6>
			char buf[256];
			IrDecode();
 8000bde:	f7ff fe43 	bl	8000868 <IrDecode>
			sprintf(buf, "%02x%02x%02x%02x\n", irda_cmd[0], irda_cmd[1],
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <main+0xfc>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <main+0xfc>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	461c      	mov	r4, r3
					irda_cmd[2], irda_cmd[3]);
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <main+0xfc>)
 8000bf0:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%02x%02x%02x%02x\n", irda_cmd[0], irda_cmd[1],
 8000bf2:	461a      	mov	r2, r3
					irda_cmd[2], irda_cmd[3]);
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <main+0xfc>)
 8000bf6:	78db      	ldrb	r3, [r3, #3]
			sprintf(buf, "%02x%02x%02x%02x\n", irda_cmd[0], irda_cmd[1],
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	9200      	str	r2, [sp, #0]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	460a      	mov	r2, r1
 8000c02:	4921      	ldr	r1, [pc, #132]	@ (8000c88 <main+0x100>)
 8000c04:	f002 fadc 	bl	80031c0 <siprintf>
			HAL_UART_Transmit(&huart1, (const uint8_t*) buf, strlen(buf), 2);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fafa 	bl	8000204 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4639      	mov	r1, r7
 8000c16:	2302      	movs	r3, #2
 8000c18:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <main+0x104>)
 8000c1a:	f001 ff15 	bl	8002a48 <HAL_UART_Transmit>
			Set7SegDisplayValue(irda_cmd[2]);
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <main+0xfc>)
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fce2 	bl	80005ec <Set7SegDisplayValue>
			modeLed = getMode(buf);
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe54 	bl	80008d8 <getMode>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <main+0x108>)
 8000c36:	701a      	strb	r2, [r3, #0]
			command_ok = 0;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <main+0xe8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
		}
		Run7SegDisplay();
 8000c3e:	f7ff fce9 	bl	8000614 <Run7SegDisplay>
		if (HAL_GetTick() - lastCurrentTime > 500) {
 8000c42:	f000 fb65 	bl	8001310 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <main+0xf4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c52:	d9b8      	bls.n	8000bc6 <main+0x3e>
			DisplayLEDs(modeLed);
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <main+0x108>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fedc 	bl	8000a18 <DisplayLEDs>
			lastCurrentTime = HAL_GetTick();
 8000c60:	f000 fb56 	bl	8001310 <HAL_GetTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <main+0xf4>)
 8000c68:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000c6a:	e7ac      	b.n	8000bc6 <main+0x3e>
 8000c6c:	20000130 	.word	0x20000130
 8000c70:	20000128 	.word	0x20000128
 8000c74:	200001c0 	.word	0x200001c0
 8000c78:	200001c4 	.word	0x200001c4
 8000c7c:	200001c8 	.word	0x200001c8
 8000c80:	40021800 	.word	0x40021800
 8000c84:	2000012c 	.word	0x2000012c
 8000c88:	08003b48 	.word	0x08003b48
 8000c8c:	20000178 	.word	0x20000178
 8000c90:	2000000a 	.word	0x2000000a

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	@ 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 faae 	bl	8003204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <SystemClock_Config+0xd8>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d6c <SystemClock_Config+0xd8>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b28      	ldr	r3, [pc, #160]	@ (8000d6c <SystemClock_Config+0xd8>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <SystemClock_Config+0xdc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a24      	ldr	r2, [pc, #144]	@ (8000d70 <SystemClock_Config+0xdc>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <SystemClock_Config+0xdc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d08:	23b4      	movs	r3, #180	@ 0xb4
 8000d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fe8f 	bl	8001a3c <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f000 f936 	bl	8000f94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d28:	f000 fe38 	bl	800199c <HAL_PWREx_EnableOverDrive>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d32:	f000 f92f 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2105      	movs	r1, #5
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 f8e9 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d60:	f000 f918 	bl	8000f94 <Error_Handler>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3750      	adds	r7, #80	@ 0x50
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <MX_TIM6_Init+0x64>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000d8a:	2259      	movs	r2, #89	@ 0x59
 8000d8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000d96:	2263      	movs	r2, #99	@ 0x63
 8000d98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000da2:	f001 fae3 	bl	800236c <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000dac:	f000 f8f2 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_TIM6_Init+0x60>)
 8000dbe:	f001 fd63 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 f8e4 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000130 	.word	0x20000130
 8000dd8:	40001000 	.word	0x40001000

08000ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <MX_USART1_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f001 fdc8 	bl	80029a8 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f8b9 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000178 	.word	0x20000178
 8000e2c:	40011000 	.word	0x40011000

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b4b      	ldr	r3, [pc, #300]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b47      	ldr	r3, [pc, #284]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a46      	ldr	r2, [pc, #280]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e6c:	f043 0310 	orr.w	r3, r3, #16
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b44      	ldr	r3, [pc, #272]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a3f      	ldr	r2, [pc, #252]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a38      	ldr	r2, [pc, #224]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a31      	ldr	r2, [pc, #196]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000ed8:	482b      	ldr	r0, [pc, #172]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000eda:	f000 fd07 	bl	80018ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000ee4:	4829      	ldr	r0, [pc, #164]	@ (8000f8c <MX_GPIO_Init+0x15c>)
 8000ee6:	f000 fd01 	bl	80018ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f246 010c 	movw	r1, #24588	@ 0x600c
 8000ef0:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <MX_GPIO_Init+0x160>)
 8000ef2:	f000 fcfb 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ef6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000efa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481e      	ldr	r0, [pc, #120]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000f10:	f000 fb40 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f14:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000f18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <MX_GPIO_Init+0x15c>)
 8000f2e:	f000 fb31 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 8000f32:	f246 030c 	movw	r3, #24588	@ 0x600c
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <MX_GPIO_Init+0x160>)
 8000f4c:	f000 fb22 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f50:	2320      	movs	r3, #32
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f54:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <MX_GPIO_Init+0x160>)
 8000f66:	f000 fb15 	bl	8001594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	2017      	movs	r0, #23
 8000f70:	f000 fad9 	bl	8001526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f74:	2017      	movs	r0, #23
 8000f76:	f000 faf2 	bl	800155e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021800 	.word	0x40021800

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_TIM_Base_MspInit+0x48>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d115      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <HAL_TIM_Base_MspInit+0x4c>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 14, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	210e      	movs	r1, #14
 8001022:	2036      	movs	r0, #54	@ 0x36
 8001024:	f000 fa7f 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001028:	2036      	movs	r0, #54	@ 0x36
 800102a:	f000 fa98 	bl	800155e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40001000 	.word	0x40001000
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <HAL_UART_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_UART_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800109a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ac:	2307      	movs	r3, #7
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_UART_MspInit+0x8c>)
 80010b8:	f000 fa6c 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020000 	.word	0x40020000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f8df 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  IrGetBitTime();
 8001132:	f7ff fb5f 	bl	80007f4 <IrGetBitTime>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001136:	2020      	movs	r0, #32
 8001138:	f000 fc0c 	bl	8001954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  tim6_count++;
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <TIM6_DAC_IRQHandler+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <TIM6_DAC_IRQHandler+0x18>)
 800114c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <TIM6_DAC_IRQHandler+0x1c>)
 8001150:	f001 f9cc 	bl	80024ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001c0 	.word	0x200001c0
 800115c:	20000130 	.word	0x20000130

08001160 <_sbrk>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
 8001190:	f002 f840 	bl	8003214 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20030000 	.word	0x20030000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200001cc 	.word	0x200001cc
 80011c8:	20000320 	.word	0x20000320

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001228 <LoopFillZerobss+0xe>
 80011f4:	f7ff ffea 	bl	80011cc <SystemInit>
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <LoopFillZerobss+0x12>)
 80011fa:	490d      	ldr	r1, [pc, #52]	@ (8001230 <LoopFillZerobss+0x16>)
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <LoopFillZerobss+0x1a>)
 80011fe:	2300      	movs	r3, #0
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:
 8001202:	58d4      	ldr	r4, [r2, r3]
 8001204:	50c4      	str	r4, [r0, r3]
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:
 8001208:	18c4      	adds	r4, r0, r3
 800120a:	428c      	cmp	r4, r1
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <LoopFillZerobss+0x1e>)
 8001210:	4c0a      	ldr	r4, [pc, #40]	@ (800123c <LoopFillZerobss+0x22>)
 8001212:	2300      	movs	r3, #0
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:
 800121a:	42a2      	cmp	r2, r4
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>
 800121e:	f001 ffff 	bl	8003220 <__libc_init_array>
 8001222:	f7ff fcb1 	bl	8000b88 <main>
 8001226:	4770      	bx	lr
 8001228:	20030000 	.word	0x20030000
 800122c:	20000000 	.word	0x20000000
 8001230:	2000007c 	.word	0x2000007c
 8001234:	08003bc4 	.word	0x08003bc4
 8001238:	2000007c 	.word	0x2000007c
 800123c:	2000031c 	.word	0x2000031c

08001240 <ADC_IRQHandler>:
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <HAL_Init+0x40>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <HAL_Init+0x40>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_Init+0x40>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f94f 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200d      	movs	r0, #13
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fe92 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f967 	bl	800157a <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f92f 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000020 	.word	0x20000020
 80012e0:	20000028 	.word	0x20000028
 80012e4:	20000024 	.word	0x20000024

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000028 	.word	0x20000028
 800130c:	200001d0 	.word	0x200001d0

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200001d0 	.word	0x200001d0

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000028 	.word	0x20000028

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff29 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff3e 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff8e 	bl	8001464 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff31 	bl	80013d4 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e177      	b.n	80018a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 8166 	bne.w	800189a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d005      	beq.n	80015e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b03      	cmp	r3, #3
 8001652:	d017      	beq.n	8001684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d123      	bne.n	80016d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	69b9      	ldr	r1, [r7, #24]
 80016d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80c0 	beq.w	800189a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <HAL_GPIO_Init+0x324>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a65      	ldr	r2, [pc, #404]	@ (80018b8 <HAL_GPIO_Init+0x324>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b63      	ldr	r3, [pc, #396]	@ (80018b8 <HAL_GPIO_Init+0x324>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001736:	4a61      	ldr	r2, [pc, #388]	@ (80018bc <HAL_GPIO_Init+0x328>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a58      	ldr	r2, [pc, #352]	@ (80018c0 <HAL_GPIO_Init+0x32c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d037      	beq.n	80017d2 <HAL_GPIO_Init+0x23e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a57      	ldr	r2, [pc, #348]	@ (80018c4 <HAL_GPIO_Init+0x330>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d031      	beq.n	80017ce <HAL_GPIO_Init+0x23a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a56      	ldr	r2, [pc, #344]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d02b      	beq.n	80017ca <HAL_GPIO_Init+0x236>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a55      	ldr	r2, [pc, #340]	@ (80018cc <HAL_GPIO_Init+0x338>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d025      	beq.n	80017c6 <HAL_GPIO_Init+0x232>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a54      	ldr	r2, [pc, #336]	@ (80018d0 <HAL_GPIO_Init+0x33c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01f      	beq.n	80017c2 <HAL_GPIO_Init+0x22e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a53      	ldr	r2, [pc, #332]	@ (80018d4 <HAL_GPIO_Init+0x340>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d019      	beq.n	80017be <HAL_GPIO_Init+0x22a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	@ (80018d8 <HAL_GPIO_Init+0x344>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x226>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a51      	ldr	r2, [pc, #324]	@ (80018dc <HAL_GPIO_Init+0x348>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x222>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a50      	ldr	r2, [pc, #320]	@ (80018e0 <HAL_GPIO_Init+0x34c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x21e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4f      	ldr	r2, [pc, #316]	@ (80018e4 <HAL_GPIO_Init+0x350>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x21a>
 80017aa:	2309      	movs	r3, #9
 80017ac:	e012      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017ae:	230a      	movs	r3, #10
 80017b0:	e010      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e00e      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00c      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017ba:	2306      	movs	r3, #6
 80017bc:	e00a      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017be:	2305      	movs	r3, #5
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x240>
 80017d2:	2300      	movs	r3, #0
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f002 0203 	and.w	r2, r2, #3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e4:	4935      	ldr	r1, [pc, #212]	@ (80018bc <HAL_GPIO_Init+0x328>)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f2:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001816:	4a34      	ldr	r2, [pc, #208]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001840:	4a29      	ldr	r2, [pc, #164]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186a:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001870:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_GPIO_Init+0x354>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3301      	adds	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	f67f ae84 	bls.w	80015b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3724      	adds	r7, #36	@ 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40021800 	.word	0x40021800
 80018dc:	40021c00 	.word	0x40021c00
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40022400 	.word	0x40022400
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43d9      	mvns	r1, r3
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	400b      	ands	r3, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f806 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a1f      	ldr	r2, [pc, #124]	@ (8001a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_PWREx_EnableOverDrive+0x94>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fca2 	bl	8001310 <HAL_GetTick>
 80019cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019ce:	e009      	b.n	80019e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019d0:	f7ff fc9e 	bl	8001310 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019de:	d901      	bls.n	80019e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e01f      	b.n	8001a24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f0:	d1ee      	bne.n	80019d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fc8a 	bl	8001310 <HAL_GetTick>
 80019fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019fe:	e009      	b.n	8001a14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a00:	f7ff fc86 	bl	8001310 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a0e:	d901      	bls.n	8001a14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e007      	b.n	8001a24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a20:	d1ee      	bne.n	8001a00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	420e0040 	.word	0x420e0040
 8001a34:	40007000 	.word	0x40007000
 8001a38:	420e0044 	.word	0x420e0044

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e267      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a5a:	4b88      	ldr	r3, [pc, #544]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b85      	ldr	r3, [pc, #532]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b82      	ldr	r3, [pc, #520]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b7e      	ldr	r3, [pc, #504]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e242      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x74>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6f      	ldr	r2, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6c      	ldr	r2, [pc, #432]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ad4:	4b69      	ldr	r3, [pc, #420]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc0c 	bl	8001310 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc08 	bl	8001310 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e207      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbf8 	bl	8001310 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbf4 	bl	8001310 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1f3      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b52:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fbad 	bl	8001310 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fba9 	bl	8001310 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a8      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb8c 	bl	8001310 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fb88 	bl	8001310 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e187      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fb6c 	bl	8001310 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fb68 	bl	8001310 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e167      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x200>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb55 	bl	8001310 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb51 	bl	8001310 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e150      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b81      	ldr	r3, [pc, #516]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a7c      	ldr	r2, [pc, #496]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b77      	ldr	r3, [pc, #476]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b74      	ldr	r3, [pc, #464]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fb11 	bl	8001310 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff fb0d 	bl	8001310 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2ea>
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a63      	ldr	r2, [pc, #396]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x30c>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	4a5e      	ldr	r2, [pc, #376]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d48:	4b58      	ldr	r3, [pc, #352]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a57      	ldr	r2, [pc, #348]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d54:	4b55      	ldr	r3, [pc, #340]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a54      	ldr	r2, [pc, #336]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fad2 	bl	8001310 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff face 	bl	8001310 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b49      	ldr	r3, [pc, #292]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fabc 	bl	8001310 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fab8 	bl	8001310 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b5      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a38      	ldr	r2, [pc, #224]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a1 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d05c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d141      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa8c 	bl	8001310 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fa88 	bl	8001310 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e087      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	491b      	ldr	r1, [pc, #108]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa61 	bl	8001310 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fa5d 	bl	8001310 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e05c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x416>
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fa4a 	bl	8001310 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fa46 	bl	8001310 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e038      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d028      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cc      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b68      	ldr	r3, [pc, #416]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b65      	ldr	r3, [pc, #404]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e067      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4934      	ldr	r1, [pc, #208]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff f978 	bl	8001310 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f974 	bl	8001310 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	@ (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8d8 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08003b68 	.word	0x08003b68
 80020f0:	20000020 	.word	0x20000020
 80020f4:	20000024 	.word	0x20000024

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b094      	sub	sp, #80	@ 0x50
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4b79      	ldr	r3, [pc, #484]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d00d      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 800211c:	2b08      	cmp	r3, #8
 800211e:	f200 80e1 	bhi.w	80022e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3a>
 800212a:	e0db      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x204>)
 800212e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002130:	e0db      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002132:	4b73      	ldr	r3, [pc, #460]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x208>)
 8002134:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002136:	e0d8      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b6d      	ldr	r3, [pc, #436]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002158:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
 8002166:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4621      	mov	r1, r4
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	6139      	str	r1, [r7, #16]
 8002188:	4629      	mov	r1, r5
 800218a:	eb63 0301 	sbc.w	r3, r3, r1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800219c:	4659      	mov	r1, fp
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a6:	4651      	mov	r1, sl
 80021a8:	018a      	lsls	r2, r1, #6
 80021aa:	4651      	mov	r1, sl
 80021ac:	ebb2 0801 	subs.w	r8, r2, r1
 80021b0:	4659      	mov	r1, fp
 80021b2:	eb63 0901 	sbc.w	r9, r3, r1
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ca:	4690      	mov	r8, r2
 80021cc:	4699      	mov	r9, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	eb18 0303 	adds.w	r3, r8, r3
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	462b      	mov	r3, r5
 80021d8:	eb49 0303 	adc.w	r3, r9, r3
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ea:	4629      	mov	r1, r5
 80021ec:	024b      	lsls	r3, r1, #9
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f4:	4621      	mov	r1, r4
 80021f6:	024a      	lsls	r2, r1, #9
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fe:	2200      	movs	r2, #0
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002208:	f7fe f85a 	bl	80002c0 <__aeabi_uldivmod>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4613      	mov	r3, r2
 8002212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002214:	e058      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b38      	ldr	r3, [pc, #224]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	2200      	movs	r2, #0
 800221e:	4618      	mov	r0, r3
 8002220:	4611      	mov	r1, r2
 8002222:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
 800222c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002230:	4642      	mov	r2, r8
 8002232:	464b      	mov	r3, r9
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	0159      	lsls	r1, r3, #5
 800223e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002242:	0150      	lsls	r0, r2, #5
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4641      	mov	r1, r8
 800224a:	ebb2 0a01 	subs.w	sl, r2, r1
 800224e:	4649      	mov	r1, r9
 8002250:	eb63 0b01 	sbc.w	fp, r3, r1
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002260:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002264:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002268:	ebb2 040a 	subs.w	r4, r2, sl
 800226c:	eb63 050b 	sbc.w	r5, r3, fp
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	00eb      	lsls	r3, r5, #3
 800227a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227e:	00e2      	lsls	r2, r4, #3
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	4643      	mov	r3, r8
 8002286:	18e3      	adds	r3, r4, r3
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	464b      	mov	r3, r9
 800228c:	eb45 0303 	adc.w	r3, r5, r3
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229e:	4629      	mov	r1, r5
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	4621      	mov	r1, r4
 80022a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a8:	4621      	mov	r1, r4
 80022aa:	028a      	lsls	r2, r1, #10
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b2:	2200      	movs	r2, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	61fa      	str	r2, [r7, #28]
 80022b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022bc:	f7fe f800 	bl	80002c0 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x204>)
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3750      	adds	r7, #80	@ 0x50
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000020 	.word	0x20000020

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff0 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a9b      	lsrs	r3, r3, #10
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	08003b78 	.word	0x08003b78

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffdc 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0b5b      	lsrs	r3, r3, #13
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	@ (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	08003b78 	.word	0x08003b78

0800236c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e041      	b.n	8002402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fe2c 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f000 f9c0 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04e      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d022      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d01d      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_TIM_Base_Start_IT+0xd0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x80>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40001800 	.word	0x40001800

080024ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0202 	mvn.w	r2, #2
 8002520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f8dc 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8ce 	bl	80026e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8df 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0204 	mvn.w	r2, #4
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8b6 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8a8 	bl	80026e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f8b9 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0208 	mvn.w	r2, #8
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f890 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f882 	bl	80026e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f893 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0210 	mvn.w	r2, #16
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2208      	movs	r2, #8
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f86a 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f85c 	bl	80026e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f86d 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f83a 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f98c 	bl	8002994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f83e 	bl	800271c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f95e 	bl	8002980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a46      	ldr	r2, [pc, #280]	@ (800285c <TIM_Base_SetConfig+0x12c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <TIM_Base_SetConfig+0x40>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274e:	d00f      	beq.n	8002770 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a43      	ldr	r2, [pc, #268]	@ (8002860 <TIM_Base_SetConfig+0x130>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00b      	beq.n	8002770 <TIM_Base_SetConfig+0x40>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a42      	ldr	r2, [pc, #264]	@ (8002864 <TIM_Base_SetConfig+0x134>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <TIM_Base_SetConfig+0x40>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a41      	ldr	r2, [pc, #260]	@ (8002868 <TIM_Base_SetConfig+0x138>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d003      	beq.n	8002770 <TIM_Base_SetConfig+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <TIM_Base_SetConfig+0x13c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a35      	ldr	r2, [pc, #212]	@ (800285c <TIM_Base_SetConfig+0x12c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02b      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002790:	d027      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a32      	ldr	r2, [pc, #200]	@ (8002860 <TIM_Base_SetConfig+0x130>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d023      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a31      	ldr	r2, [pc, #196]	@ (8002864 <TIM_Base_SetConfig+0x134>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01f      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a30      	ldr	r2, [pc, #192]	@ (8002868 <TIM_Base_SetConfig+0x138>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01b      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <TIM_Base_SetConfig+0x13c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d017      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002870 <TIM_Base_SetConfig+0x140>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00f      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <TIM_Base_SetConfig+0x148>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2b      	ldr	r2, [pc, #172]	@ (800287c <TIM_Base_SetConfig+0x14c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002880 <TIM_Base_SetConfig+0x150>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d003      	beq.n	80027e2 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d108      	bne.n	80027f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <TIM_Base_SetConfig+0x12c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0xf8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a12      	ldr	r2, [pc, #72]	@ (800286c <TIM_Base_SetConfig+0x13c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]
  }
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010000 	.word	0x40010000
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00
 800286c:	40010400 	.word	0x40010400
 8002870:	40014000 	.word	0x40014000
 8002874:	40014400 	.word	0x40014400
 8002878:	40014800 	.word	0x40014800
 800287c:	40001800 	.word	0x40001800
 8002880:	40001c00 	.word	0x40001c00
 8002884:	40002000 	.word	0x40002000

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e05a      	b.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d022      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d01d      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a15      	ldr	r2, [pc, #84]	@ (800297c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40010400 	.word	0x40010400
 8002978:	40014000 	.word	0x40014000
 800297c:	40001800 	.word	0x40001800

08002980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e042      	b.n	8002a40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fb36 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	@ 0x24
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f973 	bl	8002cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d175      	bne.n	8002b54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_UART_Transmit+0x2c>
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06e      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	@ 0x21
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fc43 	bl	8001310 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002abc:	e02e      	b.n	8002b1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f848 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e03a      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cb      	bne.n	8002abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f814 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	e03b      	b.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d037      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b78:	f7fe fbca 	bl	8001310 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e03a      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d020      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d01d      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d116      	bne.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f81d 	bl	8002c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00f      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d0b4      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b095      	sub	sp, #84	@ 0x54
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c38:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f023 0310 	bic.w	r3, r3, #16
 8002c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ca8:	61ba      	str	r2, [r7, #24]
 8002caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	6979      	ldr	r1, [r7, #20]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cca:	bf00      	nop
 8002ccc:	3754      	adds	r7, #84	@ 0x54
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b0c0      	sub	sp, #256	@ 0x100
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	ea40 0301 	orr.w	r3, r0, r1
 8002d00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d30:	f021 010c 	bic.w	r1, r1, #12
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d52:	6999      	ldr	r1, [r3, #24]
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	ea40 0301 	orr.w	r3, r0, r1
 8002d5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa4 <UART_SetConfig+0x2cc>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d005      	beq.n	8002d78 <UART_SetConfig+0xa0>
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa8 <UART_SetConfig+0x2d0>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d104      	bne.n	8002d82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff fae4 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d80:	e003      	b.n	8002d8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d82:	f7ff facb 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002d86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d94:	f040 810c 	bne.w	8002fb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002da2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002da6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002daa:	4622      	mov	r2, r4
 8002dac:	462b      	mov	r3, r5
 8002dae:	1891      	adds	r1, r2, r2
 8002db0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002db2:	415b      	adcs	r3, r3
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dba:	4621      	mov	r1, r4
 8002dbc:	eb12 0801 	adds.w	r8, r2, r1
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb43 0901 	adc.w	r9, r3, r1
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dda:	4690      	mov	r8, r2
 8002ddc:	4699      	mov	r9, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	eb18 0303 	adds.w	r3, r8, r3
 8002de4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002de8:	462b      	mov	r3, r5
 8002dea:	eb49 0303 	adc.w	r3, r9, r3
 8002dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e06:	460b      	mov	r3, r1
 8002e08:	18db      	adds	r3, r3, r3
 8002e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	eb42 0303 	adc.w	r3, r2, r3
 8002e12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e1c:	f7fd fa50 	bl	80002c0 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4b61      	ldr	r3, [pc, #388]	@ (8002fac <UART_SetConfig+0x2d4>)
 8002e26:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	011c      	lsls	r4, r3, #4
 8002e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e40:	4642      	mov	r2, r8
 8002e42:	464b      	mov	r3, r9
 8002e44:	1891      	adds	r1, r2, r2
 8002e46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e50:	4641      	mov	r1, r8
 8002e52:	eb12 0a01 	adds.w	sl, r2, r1
 8002e56:	4649      	mov	r1, r9
 8002e58:	eb43 0b01 	adc.w	fp, r3, r1
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e70:	4692      	mov	sl, r2
 8002e72:	469b      	mov	fp, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	eb1a 0303 	adds.w	r3, sl, r3
 8002e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	eb4b 0303 	adc.w	r3, fp, r3
 8002e84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	18db      	adds	r3, r3, r3
 8002ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	eb42 0303 	adc.w	r3, r2, r3
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002eae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002eb2:	f7fd fa05 	bl	80002c0 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <UART_SetConfig+0x2d4>)
 8002ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2264      	movs	r2, #100	@ 0x64
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	1acb      	subs	r3, r1, r3
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ed2:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <UART_SetConfig+0x2d4>)
 8002ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ee0:	441c      	add	r4, r3
 8002ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ef0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	1891      	adds	r1, r2, r2
 8002efa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002efc:	415b      	adcs	r3, r3
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f04:	4641      	mov	r1, r8
 8002f06:	1851      	adds	r1, r2, r1
 8002f08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	414b      	adcs	r3, r1
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	00cb      	lsls	r3, r1, #3
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f26:	4651      	mov	r1, sl
 8002f28:	00ca      	lsls	r2, r1, #3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4642      	mov	r2, r8
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f38:	464b      	mov	r3, r9
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	eb42 0303 	adc.w	r3, r2, r3
 8002f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f58:	460b      	mov	r3, r1
 8002f5a:	18db      	adds	r3, r3, r3
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5e:	4613      	mov	r3, r2
 8002f60:	eb42 0303 	adc.w	r3, r2, r3
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f6e:	f7fd f9a7 	bl	80002c0 <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <UART_SetConfig+0x2d4>)
 8002f78:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	2164      	movs	r1, #100	@ 0x64
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	3332      	adds	r3, #50	@ 0x32
 8002f8a:	4a08      	ldr	r2, [pc, #32]	@ (8002fac <UART_SetConfig+0x2d4>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	f003 0207 	and.w	r2, r3, #7
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4422      	add	r2, r4
 8002f9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fa0:	e106      	b.n	80031b0 <UART_SetConfig+0x4d8>
 8002fa2:	bf00      	nop
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	40011400 	.word	0x40011400
 8002fac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fc2:	4642      	mov	r2, r8
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	1891      	adds	r1, r2, r2
 8002fc8:	6239      	str	r1, [r7, #32]
 8002fca:	415b      	adcs	r3, r3
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1854      	adds	r4, r2, r1
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	eb43 0501 	adc.w	r5, r3, r1
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fea:	00e2      	lsls	r2, r4, #3
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	eb45 0303 	adc.w	r3, r5, r3
 8002ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800300e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800301e:	4629      	mov	r1, r5
 8003020:	008b      	lsls	r3, r1, #2
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003028:	4621      	mov	r1, r4
 800302a:	008a      	lsls	r2, r1, #2
 800302c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003030:	f7fd f946 	bl	80002c0 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4b60      	ldr	r3, [pc, #384]	@ (80031bc <UART_SetConfig+0x4e4>)
 800303a:	fba3 2302 	umull	r2, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	011c      	lsls	r4, r3, #4
 8003042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800304c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003054:	4642      	mov	r2, r8
 8003056:	464b      	mov	r3, r9
 8003058:	1891      	adds	r1, r2, r2
 800305a:	61b9      	str	r1, [r7, #24]
 800305c:	415b      	adcs	r3, r3
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003064:	4641      	mov	r1, r8
 8003066:	1851      	adds	r1, r2, r1
 8003068:	6139      	str	r1, [r7, #16]
 800306a:	4649      	mov	r1, r9
 800306c:	414b      	adcs	r3, r1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800307c:	4659      	mov	r1, fp
 800307e:	00cb      	lsls	r3, r1, #3
 8003080:	4651      	mov	r1, sl
 8003082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003086:	4651      	mov	r1, sl
 8003088:	00ca      	lsls	r2, r1, #3
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	4603      	mov	r3, r0
 8003090:	4642      	mov	r2, r8
 8003092:	189b      	adds	r3, r3, r2
 8003094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003098:	464b      	mov	r3, r9
 800309a:	460a      	mov	r2, r1
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030bc:	4649      	mov	r1, r9
 80030be:	008b      	lsls	r3, r1, #2
 80030c0:	4641      	mov	r1, r8
 80030c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c6:	4641      	mov	r1, r8
 80030c8:	008a      	lsls	r2, r1, #2
 80030ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030ce:	f7fd f8f7 	bl	80002c0 <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	4b38      	ldr	r3, [pc, #224]	@ (80031bc <UART_SetConfig+0x4e4>)
 80030da:	fba3 2301 	umull	r2, r3, r3, r1
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2264      	movs	r2, #100	@ 0x64
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	1acb      	subs	r3, r1, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	@ 0x32
 80030ec:	4a33      	ldr	r2, [pc, #204]	@ (80031bc <UART_SetConfig+0x4e4>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f8:	441c      	add	r4, r3
 80030fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030fe:	2200      	movs	r2, #0
 8003100:	673b      	str	r3, [r7, #112]	@ 0x70
 8003102:	677a      	str	r2, [r7, #116]	@ 0x74
 8003104:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	415b      	adcs	r3, r3
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003118:	4641      	mov	r1, r8
 800311a:	1851      	adds	r1, r2, r1
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	4649      	mov	r1, r9
 8003120:	414b      	adcs	r3, r1
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003130:	4659      	mov	r1, fp
 8003132:	00cb      	lsls	r3, r1, #3
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313a:	4651      	mov	r1, sl
 800313c:	00ca      	lsls	r2, r1, #3
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	4603      	mov	r3, r0
 8003144:	4642      	mov	r2, r8
 8003146:	189b      	adds	r3, r3, r2
 8003148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800314a:	464b      	mov	r3, r9
 800314c:	460a      	mov	r2, r1
 800314e:	eb42 0303 	adc.w	r3, r2, r3
 8003152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	663b      	str	r3, [r7, #96]	@ 0x60
 800315e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800316c:	4649      	mov	r1, r9
 800316e:	008b      	lsls	r3, r1, #2
 8003170:	4641      	mov	r1, r8
 8003172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003176:	4641      	mov	r1, r8
 8003178:	008a      	lsls	r2, r1, #2
 800317a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800317e:	f7fd f89f 	bl	80002c0 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <UART_SetConfig+0x4e4>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	@ 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	3332      	adds	r3, #50	@ 0x32
 800319a:	4a08      	ldr	r2, [pc, #32]	@ (80031bc <UART_SetConfig+0x4e4>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4422      	add	r2, r4
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031bc:	51eb851f 	.word	0x51eb851f

080031c0 <siprintf>:
 80031c0:	b40e      	push	{r1, r2, r3}
 80031c2:	b510      	push	{r4, lr}
 80031c4:	b09d      	sub	sp, #116	@ 0x74
 80031c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80031c8:	9002      	str	r0, [sp, #8]
 80031ca:	9006      	str	r0, [sp, #24]
 80031cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031d0:	480a      	ldr	r0, [pc, #40]	@ (80031fc <siprintf+0x3c>)
 80031d2:	9107      	str	r1, [sp, #28]
 80031d4:	9104      	str	r1, [sp, #16]
 80031d6:	490a      	ldr	r1, [pc, #40]	@ (8003200 <siprintf+0x40>)
 80031d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031dc:	9105      	str	r1, [sp, #20]
 80031de:	2400      	movs	r4, #0
 80031e0:	a902      	add	r1, sp, #8
 80031e2:	6800      	ldr	r0, [r0, #0]
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80031e8:	f000 f994 	bl	8003514 <_svfiprintf_r>
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	701c      	strb	r4, [r3, #0]
 80031f0:	b01d      	add	sp, #116	@ 0x74
 80031f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f6:	b003      	add	sp, #12
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	2000002c 	.word	0x2000002c
 8003200:	ffff0208 	.word	0xffff0208

08003204 <memset>:
 8003204:	4402      	add	r2, r0
 8003206:	4603      	mov	r3, r0
 8003208:	4293      	cmp	r3, r2
 800320a:	d100      	bne.n	800320e <memset+0xa>
 800320c:	4770      	bx	lr
 800320e:	f803 1b01 	strb.w	r1, [r3], #1
 8003212:	e7f9      	b.n	8003208 <memset+0x4>

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	@ (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000002c 	.word	0x2000002c

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4d0d      	ldr	r5, [pc, #52]	@ (8003258 <__libc_init_array+0x38>)
 8003224:	4c0d      	ldr	r4, [pc, #52]	@ (800325c <__libc_init_array+0x3c>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	2600      	movs	r6, #0
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	4d0b      	ldr	r5, [pc, #44]	@ (8003260 <__libc_init_array+0x40>)
 8003232:	4c0c      	ldr	r4, [pc, #48]	@ (8003264 <__libc_init_array+0x44>)
 8003234:	f000 fc64 	bl	8003b00 <_init>
 8003238:	1b64      	subs	r4, r4, r5
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	2600      	movs	r6, #0
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	08003bbc 	.word	0x08003bbc
 800325c:	08003bbc 	.word	0x08003bbc
 8003260:	08003bbc 	.word	0x08003bbc
 8003264:	08003bc0 	.word	0x08003bc0

08003268 <__retarget_lock_acquire_recursive>:
 8003268:	4770      	bx	lr

0800326a <__retarget_lock_release_recursive>:
 800326a:	4770      	bx	lr

0800326c <_free_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4605      	mov	r5, r0
 8003270:	2900      	cmp	r1, #0
 8003272:	d041      	beq.n	80032f8 <_free_r+0x8c>
 8003274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003278:	1f0c      	subs	r4, r1, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	bfb8      	it	lt
 800327e:	18e4      	addlt	r4, r4, r3
 8003280:	f000 f8e0 	bl	8003444 <__malloc_lock>
 8003284:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <_free_r+0x90>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	b933      	cbnz	r3, 8003298 <_free_r+0x2c>
 800328a:	6063      	str	r3, [r4, #4]
 800328c:	6014      	str	r4, [r2, #0]
 800328e:	4628      	mov	r0, r5
 8003290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003294:	f000 b8dc 	b.w	8003450 <__malloc_unlock>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d908      	bls.n	80032ae <_free_r+0x42>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	e7ed      	b.n	800328a <_free_r+0x1e>
 80032ae:	461a      	mov	r2, r3
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b10b      	cbz	r3, 80032b8 <_free_r+0x4c>
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d9fa      	bls.n	80032ae <_free_r+0x42>
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	1850      	adds	r0, r2, r1
 80032bc:	42a0      	cmp	r0, r4
 80032be:	d10b      	bne.n	80032d8 <_free_r+0x6c>
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	4401      	add	r1, r0
 80032c4:	1850      	adds	r0, r2, r1
 80032c6:	4283      	cmp	r3, r0
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	d1e0      	bne.n	800328e <_free_r+0x22>
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	4408      	add	r0, r1
 80032d4:	6010      	str	r0, [r2, #0]
 80032d6:	e7da      	b.n	800328e <_free_r+0x22>
 80032d8:	d902      	bls.n	80032e0 <_free_r+0x74>
 80032da:	230c      	movs	r3, #12
 80032dc:	602b      	str	r3, [r5, #0]
 80032de:	e7d6      	b.n	800328e <_free_r+0x22>
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	1821      	adds	r1, r4, r0
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf04      	itt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	bf04      	itt	eq
 80032f0:	1809      	addeq	r1, r1, r0
 80032f2:	6021      	streq	r1, [r4, #0]
 80032f4:	6054      	str	r4, [r2, #4]
 80032f6:	e7ca      	b.n	800328e <_free_r+0x22>
 80032f8:	bd38      	pop	{r3, r4, r5, pc}
 80032fa:	bf00      	nop
 80032fc:	20000318 	.word	0x20000318

08003300 <sbrk_aligned>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4e0f      	ldr	r6, [pc, #60]	@ (8003340 <sbrk_aligned+0x40>)
 8003304:	460c      	mov	r4, r1
 8003306:	6831      	ldr	r1, [r6, #0]
 8003308:	4605      	mov	r5, r0
 800330a:	b911      	cbnz	r1, 8003312 <sbrk_aligned+0x12>
 800330c:	f000 fba4 	bl	8003a58 <_sbrk_r>
 8003310:	6030      	str	r0, [r6, #0]
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 fb9f 	bl	8003a58 <_sbrk_r>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d103      	bne.n	8003326 <sbrk_aligned+0x26>
 800331e:	f04f 34ff 	mov.w	r4, #4294967295
 8003322:	4620      	mov	r0, r4
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	1cc4      	adds	r4, r0, #3
 8003328:	f024 0403 	bic.w	r4, r4, #3
 800332c:	42a0      	cmp	r0, r4
 800332e:	d0f8      	beq.n	8003322 <sbrk_aligned+0x22>
 8003330:	1a21      	subs	r1, r4, r0
 8003332:	4628      	mov	r0, r5
 8003334:	f000 fb90 	bl	8003a58 <_sbrk_r>
 8003338:	3001      	adds	r0, #1
 800333a:	d1f2      	bne.n	8003322 <sbrk_aligned+0x22>
 800333c:	e7ef      	b.n	800331e <sbrk_aligned+0x1e>
 800333e:	bf00      	nop
 8003340:	20000314 	.word	0x20000314

08003344 <_malloc_r>:
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003348:	1ccd      	adds	r5, r1, #3
 800334a:	f025 0503 	bic.w	r5, r5, #3
 800334e:	3508      	adds	r5, #8
 8003350:	2d0c      	cmp	r5, #12
 8003352:	bf38      	it	cc
 8003354:	250c      	movcc	r5, #12
 8003356:	2d00      	cmp	r5, #0
 8003358:	4606      	mov	r6, r0
 800335a:	db01      	blt.n	8003360 <_malloc_r+0x1c>
 800335c:	42a9      	cmp	r1, r5
 800335e:	d904      	bls.n	800336a <_malloc_r+0x26>
 8003360:	230c      	movs	r3, #12
 8003362:	6033      	str	r3, [r6, #0]
 8003364:	2000      	movs	r0, #0
 8003366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800336a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003440 <_malloc_r+0xfc>
 800336e:	f000 f869 	bl	8003444 <__malloc_lock>
 8003372:	f8d8 3000 	ldr.w	r3, [r8]
 8003376:	461c      	mov	r4, r3
 8003378:	bb44      	cbnz	r4, 80033cc <_malloc_r+0x88>
 800337a:	4629      	mov	r1, r5
 800337c:	4630      	mov	r0, r6
 800337e:	f7ff ffbf 	bl	8003300 <sbrk_aligned>
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	4604      	mov	r4, r0
 8003386:	d158      	bne.n	800343a <_malloc_r+0xf6>
 8003388:	f8d8 4000 	ldr.w	r4, [r8]
 800338c:	4627      	mov	r7, r4
 800338e:	2f00      	cmp	r7, #0
 8003390:	d143      	bne.n	800341a <_malloc_r+0xd6>
 8003392:	2c00      	cmp	r4, #0
 8003394:	d04b      	beq.n	800342e <_malloc_r+0xea>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	4639      	mov	r1, r7
 800339a:	4630      	mov	r0, r6
 800339c:	eb04 0903 	add.w	r9, r4, r3
 80033a0:	f000 fb5a 	bl	8003a58 <_sbrk_r>
 80033a4:	4581      	cmp	r9, r0
 80033a6:	d142      	bne.n	800342e <_malloc_r+0xea>
 80033a8:	6821      	ldr	r1, [r4, #0]
 80033aa:	1a6d      	subs	r5, r5, r1
 80033ac:	4629      	mov	r1, r5
 80033ae:	4630      	mov	r0, r6
 80033b0:	f7ff ffa6 	bl	8003300 <sbrk_aligned>
 80033b4:	3001      	adds	r0, #1
 80033b6:	d03a      	beq.n	800342e <_malloc_r+0xea>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	442b      	add	r3, r5
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	f8d8 3000 	ldr.w	r3, [r8]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	bb62      	cbnz	r2, 8003420 <_malloc_r+0xdc>
 80033c6:	f8c8 7000 	str.w	r7, [r8]
 80033ca:	e00f      	b.n	80033ec <_malloc_r+0xa8>
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	1b52      	subs	r2, r2, r5
 80033d0:	d420      	bmi.n	8003414 <_malloc_r+0xd0>
 80033d2:	2a0b      	cmp	r2, #11
 80033d4:	d917      	bls.n	8003406 <_malloc_r+0xc2>
 80033d6:	1961      	adds	r1, r4, r5
 80033d8:	42a3      	cmp	r3, r4
 80033da:	6025      	str	r5, [r4, #0]
 80033dc:	bf18      	it	ne
 80033de:	6059      	strne	r1, [r3, #4]
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	bf08      	it	eq
 80033e4:	f8c8 1000 	streq.w	r1, [r8]
 80033e8:	5162      	str	r2, [r4, r5]
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f82f 	bl	8003450 <__malloc_unlock>
 80033f2:	f104 000b 	add.w	r0, r4, #11
 80033f6:	1d23      	adds	r3, r4, #4
 80033f8:	f020 0007 	bic.w	r0, r0, #7
 80033fc:	1ac2      	subs	r2, r0, r3
 80033fe:	bf1c      	itt	ne
 8003400:	1a1b      	subne	r3, r3, r0
 8003402:	50a3      	strne	r3, [r4, r2]
 8003404:	e7af      	b.n	8003366 <_malloc_r+0x22>
 8003406:	6862      	ldr	r2, [r4, #4]
 8003408:	42a3      	cmp	r3, r4
 800340a:	bf0c      	ite	eq
 800340c:	f8c8 2000 	streq.w	r2, [r8]
 8003410:	605a      	strne	r2, [r3, #4]
 8003412:	e7eb      	b.n	80033ec <_malloc_r+0xa8>
 8003414:	4623      	mov	r3, r4
 8003416:	6864      	ldr	r4, [r4, #4]
 8003418:	e7ae      	b.n	8003378 <_malloc_r+0x34>
 800341a:	463c      	mov	r4, r7
 800341c:	687f      	ldr	r7, [r7, #4]
 800341e:	e7b6      	b.n	800338e <_malloc_r+0x4a>
 8003420:	461a      	mov	r2, r3
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	42a3      	cmp	r3, r4
 8003426:	d1fb      	bne.n	8003420 <_malloc_r+0xdc>
 8003428:	2300      	movs	r3, #0
 800342a:	6053      	str	r3, [r2, #4]
 800342c:	e7de      	b.n	80033ec <_malloc_r+0xa8>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	4630      	mov	r0, r6
 8003434:	f000 f80c 	bl	8003450 <__malloc_unlock>
 8003438:	e794      	b.n	8003364 <_malloc_r+0x20>
 800343a:	6005      	str	r5, [r0, #0]
 800343c:	e7d6      	b.n	80033ec <_malloc_r+0xa8>
 800343e:	bf00      	nop
 8003440:	20000318 	.word	0x20000318

08003444 <__malloc_lock>:
 8003444:	4801      	ldr	r0, [pc, #4]	@ (800344c <__malloc_lock+0x8>)
 8003446:	f7ff bf0f 	b.w	8003268 <__retarget_lock_acquire_recursive>
 800344a:	bf00      	nop
 800344c:	20000310 	.word	0x20000310

08003450 <__malloc_unlock>:
 8003450:	4801      	ldr	r0, [pc, #4]	@ (8003458 <__malloc_unlock+0x8>)
 8003452:	f7ff bf0a 	b.w	800326a <__retarget_lock_release_recursive>
 8003456:	bf00      	nop
 8003458:	20000310 	.word	0x20000310

0800345c <__ssputs_r>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	688e      	ldr	r6, [r1, #8]
 8003462:	461f      	mov	r7, r3
 8003464:	42be      	cmp	r6, r7
 8003466:	680b      	ldr	r3, [r1, #0]
 8003468:	4682      	mov	sl, r0
 800346a:	460c      	mov	r4, r1
 800346c:	4690      	mov	r8, r2
 800346e:	d82d      	bhi.n	80034cc <__ssputs_r+0x70>
 8003470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003478:	d026      	beq.n	80034c8 <__ssputs_r+0x6c>
 800347a:	6965      	ldr	r5, [r4, #20]
 800347c:	6909      	ldr	r1, [r1, #16]
 800347e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003482:	eba3 0901 	sub.w	r9, r3, r1
 8003486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800348a:	1c7b      	adds	r3, r7, #1
 800348c:	444b      	add	r3, r9
 800348e:	106d      	asrs	r5, r5, #1
 8003490:	429d      	cmp	r5, r3
 8003492:	bf38      	it	cc
 8003494:	461d      	movcc	r5, r3
 8003496:	0553      	lsls	r3, r2, #21
 8003498:	d527      	bpl.n	80034ea <__ssputs_r+0x8e>
 800349a:	4629      	mov	r1, r5
 800349c:	f7ff ff52 	bl	8003344 <_malloc_r>
 80034a0:	4606      	mov	r6, r0
 80034a2:	b360      	cbz	r0, 80034fe <__ssputs_r+0xa2>
 80034a4:	6921      	ldr	r1, [r4, #16]
 80034a6:	464a      	mov	r2, r9
 80034a8:	f000 fae6 	bl	8003a78 <memcpy>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80034b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	6126      	str	r6, [r4, #16]
 80034ba:	6165      	str	r5, [r4, #20]
 80034bc:	444e      	add	r6, r9
 80034be:	eba5 0509 	sub.w	r5, r5, r9
 80034c2:	6026      	str	r6, [r4, #0]
 80034c4:	60a5      	str	r5, [r4, #8]
 80034c6:	463e      	mov	r6, r7
 80034c8:	42be      	cmp	r6, r7
 80034ca:	d900      	bls.n	80034ce <__ssputs_r+0x72>
 80034cc:	463e      	mov	r6, r7
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	4632      	mov	r2, r6
 80034d2:	4641      	mov	r1, r8
 80034d4:	f000 faa6 	bl	8003a24 <memmove>
 80034d8:	68a3      	ldr	r3, [r4, #8]
 80034da:	1b9b      	subs	r3, r3, r6
 80034dc:	60a3      	str	r3, [r4, #8]
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	4433      	add	r3, r6
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	2000      	movs	r0, #0
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ea:	462a      	mov	r2, r5
 80034ec:	f000 fad2 	bl	8003a94 <_realloc_r>
 80034f0:	4606      	mov	r6, r0
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d1e0      	bne.n	80034b8 <__ssputs_r+0x5c>
 80034f6:	6921      	ldr	r1, [r4, #16]
 80034f8:	4650      	mov	r0, sl
 80034fa:	f7ff feb7 	bl	800326c <_free_r>
 80034fe:	230c      	movs	r3, #12
 8003500:	f8ca 3000 	str.w	r3, [sl]
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800350a:	81a3      	strh	r3, [r4, #12]
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	e7e9      	b.n	80034e6 <__ssputs_r+0x8a>
	...

08003514 <_svfiprintf_r>:
 8003514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003518:	4698      	mov	r8, r3
 800351a:	898b      	ldrh	r3, [r1, #12]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	b09d      	sub	sp, #116	@ 0x74
 8003520:	4607      	mov	r7, r0
 8003522:	460d      	mov	r5, r1
 8003524:	4614      	mov	r4, r2
 8003526:	d510      	bpl.n	800354a <_svfiprintf_r+0x36>
 8003528:	690b      	ldr	r3, [r1, #16]
 800352a:	b973      	cbnz	r3, 800354a <_svfiprintf_r+0x36>
 800352c:	2140      	movs	r1, #64	@ 0x40
 800352e:	f7ff ff09 	bl	8003344 <_malloc_r>
 8003532:	6028      	str	r0, [r5, #0]
 8003534:	6128      	str	r0, [r5, #16]
 8003536:	b930      	cbnz	r0, 8003546 <_svfiprintf_r+0x32>
 8003538:	230c      	movs	r3, #12
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	b01d      	add	sp, #116	@ 0x74
 8003542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003546:	2340      	movs	r3, #64	@ 0x40
 8003548:	616b      	str	r3, [r5, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	9309      	str	r3, [sp, #36]	@ 0x24
 800354e:	2320      	movs	r3, #32
 8003550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003554:	f8cd 800c 	str.w	r8, [sp, #12]
 8003558:	2330      	movs	r3, #48	@ 0x30
 800355a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80036f8 <_svfiprintf_r+0x1e4>
 800355e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003562:	f04f 0901 	mov.w	r9, #1
 8003566:	4623      	mov	r3, r4
 8003568:	469a      	mov	sl, r3
 800356a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800356e:	b10a      	cbz	r2, 8003574 <_svfiprintf_r+0x60>
 8003570:	2a25      	cmp	r2, #37	@ 0x25
 8003572:	d1f9      	bne.n	8003568 <_svfiprintf_r+0x54>
 8003574:	ebba 0b04 	subs.w	fp, sl, r4
 8003578:	d00b      	beq.n	8003592 <_svfiprintf_r+0x7e>
 800357a:	465b      	mov	r3, fp
 800357c:	4622      	mov	r2, r4
 800357e:	4629      	mov	r1, r5
 8003580:	4638      	mov	r0, r7
 8003582:	f7ff ff6b 	bl	800345c <__ssputs_r>
 8003586:	3001      	adds	r0, #1
 8003588:	f000 80a7 	beq.w	80036da <_svfiprintf_r+0x1c6>
 800358c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800358e:	445a      	add	r2, fp
 8003590:	9209      	str	r2, [sp, #36]	@ 0x24
 8003592:	f89a 3000 	ldrb.w	r3, [sl]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 809f 	beq.w	80036da <_svfiprintf_r+0x1c6>
 800359c:	2300      	movs	r3, #0
 800359e:	f04f 32ff 	mov.w	r2, #4294967295
 80035a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a6:	f10a 0a01 	add.w	sl, sl, #1
 80035aa:	9304      	str	r3, [sp, #16]
 80035ac:	9307      	str	r3, [sp, #28]
 80035ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80035b4:	4654      	mov	r4, sl
 80035b6:	2205      	movs	r2, #5
 80035b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035bc:	484e      	ldr	r0, [pc, #312]	@ (80036f8 <_svfiprintf_r+0x1e4>)
 80035be:	f7fc fe2f 	bl	8000220 <memchr>
 80035c2:	9a04      	ldr	r2, [sp, #16]
 80035c4:	b9d8      	cbnz	r0, 80035fe <_svfiprintf_r+0xea>
 80035c6:	06d0      	lsls	r0, r2, #27
 80035c8:	bf44      	itt	mi
 80035ca:	2320      	movmi	r3, #32
 80035cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035d0:	0711      	lsls	r1, r2, #28
 80035d2:	bf44      	itt	mi
 80035d4:	232b      	movmi	r3, #43	@ 0x2b
 80035d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035da:	f89a 3000 	ldrb.w	r3, [sl]
 80035de:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e0:	d015      	beq.n	800360e <_svfiprintf_r+0xfa>
 80035e2:	9a07      	ldr	r2, [sp, #28]
 80035e4:	4654      	mov	r4, sl
 80035e6:	2000      	movs	r0, #0
 80035e8:	f04f 0c0a 	mov.w	ip, #10
 80035ec:	4621      	mov	r1, r4
 80035ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035f2:	3b30      	subs	r3, #48	@ 0x30
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	d94b      	bls.n	8003690 <_svfiprintf_r+0x17c>
 80035f8:	b1b0      	cbz	r0, 8003628 <_svfiprintf_r+0x114>
 80035fa:	9207      	str	r2, [sp, #28]
 80035fc:	e014      	b.n	8003628 <_svfiprintf_r+0x114>
 80035fe:	eba0 0308 	sub.w	r3, r0, r8
 8003602:	fa09 f303 	lsl.w	r3, r9, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	9304      	str	r3, [sp, #16]
 800360a:	46a2      	mov	sl, r4
 800360c:	e7d2      	b.n	80035b4 <_svfiprintf_r+0xa0>
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	1d19      	adds	r1, r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	9103      	str	r1, [sp, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfbb      	ittet	lt
 800361a:	425b      	neglt	r3, r3
 800361c:	f042 0202 	orrlt.w	r2, r2, #2
 8003620:	9307      	strge	r3, [sp, #28]
 8003622:	9307      	strlt	r3, [sp, #28]
 8003624:	bfb8      	it	lt
 8003626:	9204      	strlt	r2, [sp, #16]
 8003628:	7823      	ldrb	r3, [r4, #0]
 800362a:	2b2e      	cmp	r3, #46	@ 0x2e
 800362c:	d10a      	bne.n	8003644 <_svfiprintf_r+0x130>
 800362e:	7863      	ldrb	r3, [r4, #1]
 8003630:	2b2a      	cmp	r3, #42	@ 0x2a
 8003632:	d132      	bne.n	800369a <_svfiprintf_r+0x186>
 8003634:	9b03      	ldr	r3, [sp, #12]
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	9203      	str	r2, [sp, #12]
 800363c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003640:	3402      	adds	r4, #2
 8003642:	9305      	str	r3, [sp, #20]
 8003644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003708 <_svfiprintf_r+0x1f4>
 8003648:	7821      	ldrb	r1, [r4, #0]
 800364a:	2203      	movs	r2, #3
 800364c:	4650      	mov	r0, sl
 800364e:	f7fc fde7 	bl	8000220 <memchr>
 8003652:	b138      	cbz	r0, 8003664 <_svfiprintf_r+0x150>
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	eba0 000a 	sub.w	r0, r0, sl
 800365a:	2240      	movs	r2, #64	@ 0x40
 800365c:	4082      	lsls	r2, r0
 800365e:	4313      	orrs	r3, r2
 8003660:	3401      	adds	r4, #1
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003668:	4824      	ldr	r0, [pc, #144]	@ (80036fc <_svfiprintf_r+0x1e8>)
 800366a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800366e:	2206      	movs	r2, #6
 8003670:	f7fc fdd6 	bl	8000220 <memchr>
 8003674:	2800      	cmp	r0, #0
 8003676:	d036      	beq.n	80036e6 <_svfiprintf_r+0x1d2>
 8003678:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <_svfiprintf_r+0x1ec>)
 800367a:	bb1b      	cbnz	r3, 80036c4 <_svfiprintf_r+0x1b0>
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	3307      	adds	r3, #7
 8003680:	f023 0307 	bic.w	r3, r3, #7
 8003684:	3308      	adds	r3, #8
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800368a:	4433      	add	r3, r6
 800368c:	9309      	str	r3, [sp, #36]	@ 0x24
 800368e:	e76a      	b.n	8003566 <_svfiprintf_r+0x52>
 8003690:	fb0c 3202 	mla	r2, ip, r2, r3
 8003694:	460c      	mov	r4, r1
 8003696:	2001      	movs	r0, #1
 8003698:	e7a8      	b.n	80035ec <_svfiprintf_r+0xd8>
 800369a:	2300      	movs	r3, #0
 800369c:	3401      	adds	r4, #1
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f04f 0c0a 	mov.w	ip, #10
 80036a6:	4620      	mov	r0, r4
 80036a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ac:	3a30      	subs	r2, #48	@ 0x30
 80036ae:	2a09      	cmp	r2, #9
 80036b0:	d903      	bls.n	80036ba <_svfiprintf_r+0x1a6>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0c6      	beq.n	8003644 <_svfiprintf_r+0x130>
 80036b6:	9105      	str	r1, [sp, #20]
 80036b8:	e7c4      	b.n	8003644 <_svfiprintf_r+0x130>
 80036ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80036be:	4604      	mov	r4, r0
 80036c0:	2301      	movs	r3, #1
 80036c2:	e7f0      	b.n	80036a6 <_svfiprintf_r+0x192>
 80036c4:	ab03      	add	r3, sp, #12
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	462a      	mov	r2, r5
 80036ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <_svfiprintf_r+0x1f0>)
 80036cc:	a904      	add	r1, sp, #16
 80036ce:	4638      	mov	r0, r7
 80036d0:	f3af 8000 	nop.w
 80036d4:	1c42      	adds	r2, r0, #1
 80036d6:	4606      	mov	r6, r0
 80036d8:	d1d6      	bne.n	8003688 <_svfiprintf_r+0x174>
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	065b      	lsls	r3, r3, #25
 80036de:	f53f af2d 	bmi.w	800353c <_svfiprintf_r+0x28>
 80036e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036e4:	e72c      	b.n	8003540 <_svfiprintf_r+0x2c>
 80036e6:	ab03      	add	r3, sp, #12
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	462a      	mov	r2, r5
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <_svfiprintf_r+0x1f0>)
 80036ee:	a904      	add	r1, sp, #16
 80036f0:	4638      	mov	r0, r7
 80036f2:	f000 f879 	bl	80037e8 <_printf_i>
 80036f6:	e7ed      	b.n	80036d4 <_svfiprintf_r+0x1c0>
 80036f8:	08003b80 	.word	0x08003b80
 80036fc:	08003b8a 	.word	0x08003b8a
 8003700:	00000000 	.word	0x00000000
 8003704:	0800345d 	.word	0x0800345d
 8003708:	08003b86 	.word	0x08003b86

0800370c <_printf_common>:
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	4616      	mov	r6, r2
 8003712:	4698      	mov	r8, r3
 8003714:	688a      	ldr	r2, [r1, #8]
 8003716:	690b      	ldr	r3, [r1, #16]
 8003718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800371c:	4293      	cmp	r3, r2
 800371e:	bfb8      	it	lt
 8003720:	4613      	movlt	r3, r2
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003728:	4607      	mov	r7, r0
 800372a:	460c      	mov	r4, r1
 800372c:	b10a      	cbz	r2, 8003732 <_printf_common+0x26>
 800372e:	3301      	adds	r3, #1
 8003730:	6033      	str	r3, [r6, #0]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	0699      	lsls	r1, r3, #26
 8003736:	bf42      	ittt	mi
 8003738:	6833      	ldrmi	r3, [r6, #0]
 800373a:	3302      	addmi	r3, #2
 800373c:	6033      	strmi	r3, [r6, #0]
 800373e:	6825      	ldr	r5, [r4, #0]
 8003740:	f015 0506 	ands.w	r5, r5, #6
 8003744:	d106      	bne.n	8003754 <_printf_common+0x48>
 8003746:	f104 0a19 	add.w	sl, r4, #25
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	6832      	ldr	r2, [r6, #0]
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	42ab      	cmp	r3, r5
 8003752:	dc26      	bgt.n	80037a2 <_printf_common+0x96>
 8003754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	3b00      	subs	r3, #0
 800375c:	bf18      	it	ne
 800375e:	2301      	movne	r3, #1
 8003760:	0692      	lsls	r2, r2, #26
 8003762:	d42b      	bmi.n	80037bc <_printf_common+0xb0>
 8003764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003768:	4641      	mov	r1, r8
 800376a:	4638      	mov	r0, r7
 800376c:	47c8      	blx	r9
 800376e:	3001      	adds	r0, #1
 8003770:	d01e      	beq.n	80037b0 <_printf_common+0xa4>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	f003 0306 	and.w	r3, r3, #6
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf02      	ittt	eq
 800377e:	68e5      	ldreq	r5, [r4, #12]
 8003780:	6833      	ldreq	r3, [r6, #0]
 8003782:	1aed      	subeq	r5, r5, r3
 8003784:	68a3      	ldr	r3, [r4, #8]
 8003786:	bf0c      	ite	eq
 8003788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800378c:	2500      	movne	r5, #0
 800378e:	4293      	cmp	r3, r2
 8003790:	bfc4      	itt	gt
 8003792:	1a9b      	subgt	r3, r3, r2
 8003794:	18ed      	addgt	r5, r5, r3
 8003796:	2600      	movs	r6, #0
 8003798:	341a      	adds	r4, #26
 800379a:	42b5      	cmp	r5, r6
 800379c:	d11a      	bne.n	80037d4 <_printf_common+0xc8>
 800379e:	2000      	movs	r0, #0
 80037a0:	e008      	b.n	80037b4 <_printf_common+0xa8>
 80037a2:	2301      	movs	r3, #1
 80037a4:	4652      	mov	r2, sl
 80037a6:	4641      	mov	r1, r8
 80037a8:	4638      	mov	r0, r7
 80037aa:	47c8      	blx	r9
 80037ac:	3001      	adds	r0, #1
 80037ae:	d103      	bne.n	80037b8 <_printf_common+0xac>
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b8:	3501      	adds	r5, #1
 80037ba:	e7c6      	b.n	800374a <_printf_common+0x3e>
 80037bc:	18e1      	adds	r1, r4, r3
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	2030      	movs	r0, #48	@ 0x30
 80037c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037c6:	4422      	add	r2, r4
 80037c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037d0:	3302      	adds	r3, #2
 80037d2:	e7c7      	b.n	8003764 <_printf_common+0x58>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4622      	mov	r2, r4
 80037d8:	4641      	mov	r1, r8
 80037da:	4638      	mov	r0, r7
 80037dc:	47c8      	blx	r9
 80037de:	3001      	adds	r0, #1
 80037e0:	d0e6      	beq.n	80037b0 <_printf_common+0xa4>
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7d9      	b.n	800379a <_printf_common+0x8e>
	...

080037e8 <_printf_i>:
 80037e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	7e0f      	ldrb	r7, [r1, #24]
 80037ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037f0:	2f78      	cmp	r7, #120	@ 0x78
 80037f2:	4691      	mov	r9, r2
 80037f4:	4680      	mov	r8, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	469a      	mov	sl, r3
 80037fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037fe:	d807      	bhi.n	8003810 <_printf_i+0x28>
 8003800:	2f62      	cmp	r7, #98	@ 0x62
 8003802:	d80a      	bhi.n	800381a <_printf_i+0x32>
 8003804:	2f00      	cmp	r7, #0
 8003806:	f000 80d1 	beq.w	80039ac <_printf_i+0x1c4>
 800380a:	2f58      	cmp	r7, #88	@ 0x58
 800380c:	f000 80b8 	beq.w	8003980 <_printf_i+0x198>
 8003810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003818:	e03a      	b.n	8003890 <_printf_i+0xa8>
 800381a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800381e:	2b15      	cmp	r3, #21
 8003820:	d8f6      	bhi.n	8003810 <_printf_i+0x28>
 8003822:	a101      	add	r1, pc, #4	@ (adr r1, 8003828 <_printf_i+0x40>)
 8003824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003828:	08003881 	.word	0x08003881
 800382c:	08003895 	.word	0x08003895
 8003830:	08003811 	.word	0x08003811
 8003834:	08003811 	.word	0x08003811
 8003838:	08003811 	.word	0x08003811
 800383c:	08003811 	.word	0x08003811
 8003840:	08003895 	.word	0x08003895
 8003844:	08003811 	.word	0x08003811
 8003848:	08003811 	.word	0x08003811
 800384c:	08003811 	.word	0x08003811
 8003850:	08003811 	.word	0x08003811
 8003854:	08003993 	.word	0x08003993
 8003858:	080038bf 	.word	0x080038bf
 800385c:	0800394d 	.word	0x0800394d
 8003860:	08003811 	.word	0x08003811
 8003864:	08003811 	.word	0x08003811
 8003868:	080039b5 	.word	0x080039b5
 800386c:	08003811 	.word	0x08003811
 8003870:	080038bf 	.word	0x080038bf
 8003874:	08003811 	.word	0x08003811
 8003878:	08003811 	.word	0x08003811
 800387c:	08003955 	.word	0x08003955
 8003880:	6833      	ldr	r3, [r6, #0]
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6032      	str	r2, [r6, #0]
 8003888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800388c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003890:	2301      	movs	r3, #1
 8003892:	e09c      	b.n	80039ce <_printf_i+0x1e6>
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	1d19      	adds	r1, r3, #4
 800389a:	6031      	str	r1, [r6, #0]
 800389c:	0606      	lsls	r6, r0, #24
 800389e:	d501      	bpl.n	80038a4 <_printf_i+0xbc>
 80038a0:	681d      	ldr	r5, [r3, #0]
 80038a2:	e003      	b.n	80038ac <_printf_i+0xc4>
 80038a4:	0645      	lsls	r5, r0, #25
 80038a6:	d5fb      	bpl.n	80038a0 <_printf_i+0xb8>
 80038a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038ac:	2d00      	cmp	r5, #0
 80038ae:	da03      	bge.n	80038b8 <_printf_i+0xd0>
 80038b0:	232d      	movs	r3, #45	@ 0x2d
 80038b2:	426d      	negs	r5, r5
 80038b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038b8:	4858      	ldr	r0, [pc, #352]	@ (8003a1c <_printf_i+0x234>)
 80038ba:	230a      	movs	r3, #10
 80038bc:	e011      	b.n	80038e2 <_printf_i+0xfa>
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	0608      	lsls	r0, r1, #24
 80038c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80038c8:	d402      	bmi.n	80038d0 <_printf_i+0xe8>
 80038ca:	0649      	lsls	r1, r1, #25
 80038cc:	bf48      	it	mi
 80038ce:	b2ad      	uxthmi	r5, r5
 80038d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80038d2:	4852      	ldr	r0, [pc, #328]	@ (8003a1c <_printf_i+0x234>)
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	bf14      	ite	ne
 80038d8:	230a      	movne	r3, #10
 80038da:	2308      	moveq	r3, #8
 80038dc:	2100      	movs	r1, #0
 80038de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038e2:	6866      	ldr	r6, [r4, #4]
 80038e4:	60a6      	str	r6, [r4, #8]
 80038e6:	2e00      	cmp	r6, #0
 80038e8:	db05      	blt.n	80038f6 <_printf_i+0x10e>
 80038ea:	6821      	ldr	r1, [r4, #0]
 80038ec:	432e      	orrs	r6, r5
 80038ee:	f021 0104 	bic.w	r1, r1, #4
 80038f2:	6021      	str	r1, [r4, #0]
 80038f4:	d04b      	beq.n	800398e <_printf_i+0x1a6>
 80038f6:	4616      	mov	r6, r2
 80038f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038fc:	fb03 5711 	mls	r7, r3, r1, r5
 8003900:	5dc7      	ldrb	r7, [r0, r7]
 8003902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003906:	462f      	mov	r7, r5
 8003908:	42bb      	cmp	r3, r7
 800390a:	460d      	mov	r5, r1
 800390c:	d9f4      	bls.n	80038f8 <_printf_i+0x110>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d10b      	bne.n	800392a <_printf_i+0x142>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	07df      	lsls	r7, r3, #31
 8003916:	d508      	bpl.n	800392a <_printf_i+0x142>
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	6861      	ldr	r1, [r4, #4]
 800391c:	4299      	cmp	r1, r3
 800391e:	bfde      	ittt	le
 8003920:	2330      	movle	r3, #48	@ 0x30
 8003922:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003926:	f106 36ff 	addle.w	r6, r6, #4294967295
 800392a:	1b92      	subs	r2, r2, r6
 800392c:	6122      	str	r2, [r4, #16]
 800392e:	f8cd a000 	str.w	sl, [sp]
 8003932:	464b      	mov	r3, r9
 8003934:	aa03      	add	r2, sp, #12
 8003936:	4621      	mov	r1, r4
 8003938:	4640      	mov	r0, r8
 800393a:	f7ff fee7 	bl	800370c <_printf_common>
 800393e:	3001      	adds	r0, #1
 8003940:	d14a      	bne.n	80039d8 <_printf_i+0x1f0>
 8003942:	f04f 30ff 	mov.w	r0, #4294967295
 8003946:	b004      	add	sp, #16
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	4832      	ldr	r0, [pc, #200]	@ (8003a20 <_printf_i+0x238>)
 8003956:	2778      	movs	r7, #120	@ 0x78
 8003958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	6831      	ldr	r1, [r6, #0]
 8003960:	061f      	lsls	r7, r3, #24
 8003962:	f851 5b04 	ldr.w	r5, [r1], #4
 8003966:	d402      	bmi.n	800396e <_printf_i+0x186>
 8003968:	065f      	lsls	r7, r3, #25
 800396a:	bf48      	it	mi
 800396c:	b2ad      	uxthmi	r5, r5
 800396e:	6031      	str	r1, [r6, #0]
 8003970:	07d9      	lsls	r1, r3, #31
 8003972:	bf44      	itt	mi
 8003974:	f043 0320 	orrmi.w	r3, r3, #32
 8003978:	6023      	strmi	r3, [r4, #0]
 800397a:	b11d      	cbz	r5, 8003984 <_printf_i+0x19c>
 800397c:	2310      	movs	r3, #16
 800397e:	e7ad      	b.n	80038dc <_printf_i+0xf4>
 8003980:	4826      	ldr	r0, [pc, #152]	@ (8003a1c <_printf_i+0x234>)
 8003982:	e7e9      	b.n	8003958 <_printf_i+0x170>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	e7f6      	b.n	800397c <_printf_i+0x194>
 800398e:	4616      	mov	r6, r2
 8003990:	e7bd      	b.n	800390e <_printf_i+0x126>
 8003992:	6833      	ldr	r3, [r6, #0]
 8003994:	6825      	ldr	r5, [r4, #0]
 8003996:	6961      	ldr	r1, [r4, #20]
 8003998:	1d18      	adds	r0, r3, #4
 800399a:	6030      	str	r0, [r6, #0]
 800399c:	062e      	lsls	r6, r5, #24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	d501      	bpl.n	80039a6 <_printf_i+0x1be>
 80039a2:	6019      	str	r1, [r3, #0]
 80039a4:	e002      	b.n	80039ac <_printf_i+0x1c4>
 80039a6:	0668      	lsls	r0, r5, #25
 80039a8:	d5fb      	bpl.n	80039a2 <_printf_i+0x1ba>
 80039aa:	8019      	strh	r1, [r3, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	4616      	mov	r6, r2
 80039b2:	e7bc      	b.n	800392e <_printf_i+0x146>
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	6032      	str	r2, [r6, #0]
 80039ba:	681e      	ldr	r6, [r3, #0]
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	2100      	movs	r1, #0
 80039c0:	4630      	mov	r0, r6
 80039c2:	f7fc fc2d 	bl	8000220 <memchr>
 80039c6:	b108      	cbz	r0, 80039cc <_printf_i+0x1e4>
 80039c8:	1b80      	subs	r0, r0, r6
 80039ca:	6060      	str	r0, [r4, #4]
 80039cc:	6863      	ldr	r3, [r4, #4]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2300      	movs	r3, #0
 80039d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039d6:	e7aa      	b.n	800392e <_printf_i+0x146>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	4632      	mov	r2, r6
 80039dc:	4649      	mov	r1, r9
 80039de:	4640      	mov	r0, r8
 80039e0:	47d0      	blx	sl
 80039e2:	3001      	adds	r0, #1
 80039e4:	d0ad      	beq.n	8003942 <_printf_i+0x15a>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	079b      	lsls	r3, r3, #30
 80039ea:	d413      	bmi.n	8003a14 <_printf_i+0x22c>
 80039ec:	68e0      	ldr	r0, [r4, #12]
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	4298      	cmp	r0, r3
 80039f2:	bfb8      	it	lt
 80039f4:	4618      	movlt	r0, r3
 80039f6:	e7a6      	b.n	8003946 <_printf_i+0x15e>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4632      	mov	r2, r6
 80039fc:	4649      	mov	r1, r9
 80039fe:	4640      	mov	r0, r8
 8003a00:	47d0      	blx	sl
 8003a02:	3001      	adds	r0, #1
 8003a04:	d09d      	beq.n	8003942 <_printf_i+0x15a>
 8003a06:	3501      	adds	r5, #1
 8003a08:	68e3      	ldr	r3, [r4, #12]
 8003a0a:	9903      	ldr	r1, [sp, #12]
 8003a0c:	1a5b      	subs	r3, r3, r1
 8003a0e:	42ab      	cmp	r3, r5
 8003a10:	dcf2      	bgt.n	80039f8 <_printf_i+0x210>
 8003a12:	e7eb      	b.n	80039ec <_printf_i+0x204>
 8003a14:	2500      	movs	r5, #0
 8003a16:	f104 0619 	add.w	r6, r4, #25
 8003a1a:	e7f5      	b.n	8003a08 <_printf_i+0x220>
 8003a1c:	08003b91 	.word	0x08003b91
 8003a20:	08003ba2 	.word	0x08003ba2

08003a24 <memmove>:
 8003a24:	4288      	cmp	r0, r1
 8003a26:	b510      	push	{r4, lr}
 8003a28:	eb01 0402 	add.w	r4, r1, r2
 8003a2c:	d902      	bls.n	8003a34 <memmove+0x10>
 8003a2e:	4284      	cmp	r4, r0
 8003a30:	4623      	mov	r3, r4
 8003a32:	d807      	bhi.n	8003a44 <memmove+0x20>
 8003a34:	1e43      	subs	r3, r0, #1
 8003a36:	42a1      	cmp	r1, r4
 8003a38:	d008      	beq.n	8003a4c <memmove+0x28>
 8003a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a42:	e7f8      	b.n	8003a36 <memmove+0x12>
 8003a44:	4402      	add	r2, r0
 8003a46:	4601      	mov	r1, r0
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	d100      	bne.n	8003a4e <memmove+0x2a>
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a56:	e7f7      	b.n	8003a48 <memmove+0x24>

08003a58 <_sbrk_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4d06      	ldr	r5, [pc, #24]	@ (8003a74 <_sbrk_r+0x1c>)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4604      	mov	r4, r0
 8003a60:	4608      	mov	r0, r1
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	f7fd fb7c 	bl	8001160 <_sbrk>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_sbrk_r+0x1a>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_sbrk_r+0x1a>
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	2000030c 	.word	0x2000030c

08003a78 <memcpy>:
 8003a78:	440a      	add	r2, r1
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a80:	d100      	bne.n	8003a84 <memcpy+0xc>
 8003a82:	4770      	bx	lr
 8003a84:	b510      	push	{r4, lr}
 8003a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a8e:	4291      	cmp	r1, r2
 8003a90:	d1f9      	bne.n	8003a86 <memcpy+0xe>
 8003a92:	bd10      	pop	{r4, pc}

08003a94 <_realloc_r>:
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	4607      	mov	r7, r0
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	460d      	mov	r5, r1
 8003a9e:	b921      	cbnz	r1, 8003aaa <_realloc_r+0x16>
 8003aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	f7ff bc4d 	b.w	8003344 <_malloc_r>
 8003aaa:	b92a      	cbnz	r2, 8003ab8 <_realloc_r+0x24>
 8003aac:	f7ff fbde 	bl	800326c <_free_r>
 8003ab0:	4625      	mov	r5, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	f000 f81a 	bl	8003af0 <_malloc_usable_size_r>
 8003abc:	4284      	cmp	r4, r0
 8003abe:	4606      	mov	r6, r0
 8003ac0:	d802      	bhi.n	8003ac8 <_realloc_r+0x34>
 8003ac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ac6:	d8f4      	bhi.n	8003ab2 <_realloc_r+0x1e>
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4638      	mov	r0, r7
 8003acc:	f7ff fc3a 	bl	8003344 <_malloc_r>
 8003ad0:	4680      	mov	r8, r0
 8003ad2:	b908      	cbnz	r0, 8003ad8 <_realloc_r+0x44>
 8003ad4:	4645      	mov	r5, r8
 8003ad6:	e7ec      	b.n	8003ab2 <_realloc_r+0x1e>
 8003ad8:	42b4      	cmp	r4, r6
 8003ada:	4622      	mov	r2, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	bf28      	it	cs
 8003ae0:	4632      	movcs	r2, r6
 8003ae2:	f7ff ffc9 	bl	8003a78 <memcpy>
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4638      	mov	r0, r7
 8003aea:	f7ff fbbf 	bl	800326c <_free_r>
 8003aee:	e7f1      	b.n	8003ad4 <_realloc_r+0x40>

08003af0 <_malloc_usable_size_r>:
 8003af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af4:	1f18      	subs	r0, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfbc      	itt	lt
 8003afa:	580b      	ldrlt	r3, [r1, r0]
 8003afc:	18c0      	addlt	r0, r0, r3
 8003afe:	4770      	bx	lr

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
